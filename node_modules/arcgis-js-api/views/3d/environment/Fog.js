/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
define(["exports","../../../chunks/_rollupPluginBabelHelpers","../../../chunks/tslib.es6","../../../core/Accessor","../../../core/mathUtils","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/ensureType","../../../core/arrayUtils","../../../core/has","../../../core/accessorSupport/decorators/subclass","../../../chunks/vec3","../../../chunks/vec3f64","../../../geometry/ellipsoidUtils","./atmosphereUtils","../../../chunks/Fog.glsl","./FogTechnique","./weather","../webgl-engine/lib/DefaultVertexBufferLayouts","../webgl-engine/lib/glUtil3D","../../webgl/enums"],(function(e,t,r,s,o,a,i,n,c,h,p,u,l,d,g,_,m,f,y,P){"use strict";const b=.95,v=1;e.Fog=function(e){function r(t){var r;(r=e.call(this,t)||this)._passParameters=new g.FogPassParameters;const s=t.context.renderContext.rctx;r._vao=y.createQuadVAO(s,f.Pos2Tex),r._technique=new _.FogTechnique(t);const o=l.getReferenceEllipsoid(t.view.spatialReference);return r._planetRadius=o.radius,r._atmosphereRadius=o.radius+d.atmosphereHeight,r}t._inherits(r,e);var s=r.prototype;return s.destroy=function(){this._technique.release(),this._vao.dispose()},s.render=function(e,t){if(this._update(e,t),this._passParameters.fogAmount<=0)return;const r=this._technique;if(!r.compiled)return void this.context.requestRender();const s=e.offscreenRenderingHelper;s.renderDepthDetached((()=>{this._passParameters.depthTexture=s.depthTexture;const t=e.rctx.bindTechnique(r,this._passParameters,e.bindParameters);this._renderFog(t,e)}))},s._renderFog=function(e,t){const r=t.rctx;r.bindVAO(this._vao),e.assertCompatibleVertexAttributeLocations(this._vao),r.drawArrays(P.PrimitiveType.TRIANGLE_STRIP,0,4)},s._update=function(e,t){const r=e.bindParameters.camera;p.normalize(F,r.eye);const s=Math.max(0,p.dot(F,e.bindParameters.lighting.mainLight.direction)),a=t.color,i=.1;p.scale(w,a,i),p.lerp(this._passParameters.fogColor,w,a,s);const n=p.length(r.eye),c=n*n;this._passParameters.atmosphereC=c-this._atmosphereRadius*this._atmosphereRadius,this._passParameters.fogAmount=(1-o.smoothstep(b*m.weatherHeightLimit,v*m.weatherHeightLimit,Math.abs(n-this._planetRadius)))*t.amount,this._passParameters.fogStrength=t.strength},r.isSupported=function(e){return e.capabilities.depthTexture},t._createClass(r,[{key:"strength",get:function(){return this._passParameters.fogStrength},set:function(e){this._passParameters.fogStrength=e}}]),r}(s),r.__decorate([a.property({constructOnly:!0})],e.Fog.prototype,"context",void 0),r.__decorate([a.property({constructOnly:!0})],e.Fog.prototype,"view",void 0),r.__decorate([a.property({constructOnly:!0})],e.Fog.prototype,"rctx",void 0),r.__decorate([a.property({constructOnly:!0})],e.Fog.prototype,"viewingMode",void 0),e.Fog=r.__decorate([h.subclass("esri.views.3d.environment.Fog")],e.Fog);let x=t._createClass((function(){this.color=u.create(),this.strength=0,this.amount=0}));const F=u.create(),w=u.create();e.FogParameters=x,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
