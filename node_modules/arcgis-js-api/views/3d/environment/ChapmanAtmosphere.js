/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
define(["exports","../../../chunks/_rollupPluginBabelHelpers","../../../core/Handles","../../../core/mathUtils","../../../core/reactiveUtils","../../../chunks/vec2","../../../chunks/vec2f64","../../../chunks/vec3","../../../chunks/vec4","../../../geometry/support/Ellipsoid","./AtmosphereType","./atmosphereUtils","./ChapmanAtmosphereTechnique","./ChapmanAtmosphereTechniqueConfiguration","../webgl-engine/lib/DefaultVertexBufferLayouts","../webgl-engine/lib/glUtil3D","../../webgl/enums"],(function(e,t,a,i,s,r,n,h,o,u,p,d,c,l,m,_,T){"use strict";let f=function(){function e(e,t){this._view=e,this.type=p.AtmosphereType.Realistic,this._handles=new a,this._passParameters=new c.ChapmanAtmospherePassParameters,this._rootTileElevationMin=NaN,this._lowerBoundEarthRadius=u.earth.radius,this._fadeHaze=0,this._tmpScale=n.create(),this._updateRadius(u.earth.radius);const i=t.renderContext.rctx;this._updateRootTileElevationBounds(),this._handles.add([s.watch((()=>this._view?.basemapTerrain?.rootTileElevationBounds),(()=>this._view?.basemapTerrain?this._updateRootTileElevationBounds():null)),s.watch((()=>this._view?.basemapTerrain?.visibleElevationBounds),(()=>this._view?.basemapTerrain?this._updateVisibleElevationBounds():null))]);const r=new l.ChapmanAtmosphereTechniqueConfiguration;r.haze=!1,this._atmosphereTechnique=t.techniqueRepository.acquire(c.ChapmanAtmosphereTechnique,r),r.haze=!0,this._atmosphereHazeTechnique=t.techniqueRepository.acquire(c.ChapmanAtmosphereTechnique,r),r.reduced=!0,r.haze=!1,this._atmosphereReducedTechnique=t.techniqueRepository.acquire(c.ChapmanAtmosphereTechnique,r),r.haze=!0,this._atmosphereHazeReducedTechnique=t.techniqueRepository.acquire(c.ChapmanAtmosphereTechnique,r),this._vao=_.createQuadVAO(i,m.Pos2Tex)}var f=e.prototype;return f.destroy=function(){this._handles.destroy(),this._atmosphereTechnique.release(),this._atmosphereHazeTechnique.release(),this._atmosphereReducedTechnique.release(),this._atmosphereHazeReducedTechnique.release(),this._vao.dispose()},f.render=function(e,t){this._render(e,t?this._atmosphereTechnique:this._atmosphereReducedTechnique,e.offscreenRenderingHelper.depthTexture,t,!1)},f.renderHaze=function(e,t,a){this._fadeHaze=t,this._render(e,a?this._atmosphereHazeTechnique:this._atmosphereHazeReducedTechnique,e.offscreenRenderingHelper.linearDepthTexture,a,!0)},f._render=function(e,t,a,s,n){if(null==a)return;const o=e.offscreenRenderingHelper;this._update(e.bindParameters.camera),this._passParameters.depthTexture=a;const p=o.background.color;h.set(this._passParameters.backgroundColor,p[0]*p[3],p[1]*p[3],p[2]*p[3]);const c=e.rctx.bindTechnique(t,this._passParameters,e.bindParameters);if(s)o.renderDepthDetached((()=>this._renderCommon(c,e)));else{const t=e.rctx.getViewport(),s=h.length(e.bindParameters.camera.eye)-u.earth.radius;let p;if(s<d.atmosphereHeight){const e=Math.min(1,Math.max(0,s/d.atmosphereHeight));p=n?i.lerp(.4,.5,e):i.lerp(.2,.3,e)}else{const e=Math.min(1,Math.max(0,(s-d.atmosphereHeight)/(15*d.atmosphereHeight)));p=n?i.lerp(.5,1,e):i.lerp(.3,.6,e)}const l=Math.floor(p*e.bindParameters.camera.fullViewport[2]),m=Math.floor(p*e.bindParameters.camera.fullViewport[3]);e.rctx.setViewport(0,0,l,m),o.renderToTargets((()=>this._renderCommon(c,e)),o.tmpColor,o.tmpDepth,[0,0,0,1],!1,!1),e.rctx.setViewport(t.x,t.y,t.width,t.height),r.set(this._tmpScale,l/e.bindParameters.camera.fullViewport[2],m/e.bindParameters.camera.fullViewport[3]),o.compositeAtmosphereToMain(e.bindParameters,n,a,this._tmpScale)}},f._renderCommon=function(e,t){null!=this._vao&&(t.rctx.bindVAO(this._vao),e.assertCompatibleVertexAttributeLocations(this._vao),t.rctx.drawArrays(T.PrimitiveType.TRIANGLE_STRIP,0,4))},f._adjustRadiusForTesselation=function(e){return e*Math.cos(Math.PI/16/16)},f._updateRootTileElevationBounds=function(){const e=this._view.basemapTerrain.rootTileElevationBounds.min;e!==this._rootTileElevationMin&&(this._rootTileElevationMin=e,this._lowerBoundEarthRadius=u.earth.radius,this._updateVisibleElevationBounds())},f._updateVisibleElevationBounds=function(){const e=this._adjustRadiusForTesselation(u.earth.radius+this._view.basemapTerrain.visibleElevationBounds.min);e<this._lowerBoundEarthRadius&&this._updateRadius(e)},f._updateRadius=function(e){this._lowerBoundEarthRadius=e,r.set(this._passParameters.radii,e,e+d.atmosphereHeight),this._passParameters.innerFadeDistance=2*Math.sqrt((2*e-d.innerAtmosphereDepth)*d.innerAtmosphereDepth)},f._update=function(e){if(!e)return;const t=h.squaredLength(e.eye),a=Math.sqrt(t),s=t-this._passParameters.radii[1]*this._passParameters.radii[1],r=i.clamp((a-this._passParameters.radii[0])/d.atmosphereHeight,0,1);o.set(this._passParameters.heightParameters,a,t,s,r),this._passParameters.altitudeFade=d.computeInnerAltitudeFade(a-this._lowerBoundEarthRadius),this._passParameters.hazeStrength=i.lerp(i.lerp(.6,1,i.smoothstep(9500,10500,a-u.earth.radius)),1,this._fadeHaze)},e.isSupported=function(e){return e.renderContext.rctx.capabilities.depthTexture},t._createClass(e)}();e.ChapmanAtmosphere=f,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
