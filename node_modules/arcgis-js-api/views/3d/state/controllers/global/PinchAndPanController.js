/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/_rollupPluginBabelHelpers","../../../../../chunks/tslib.es6","../../../../../core/Cyclical","../../../../../core/mathUtils","../../../../../core/screenUtils","../../../../../core/Logger","../../../../../core/accessorSupport/ensureType","../../../../../core/arrayUtils","../../../../../core/has","../../../../../core/Error","../../../../../core/accessorSupport/decorators/subclass","../../../../../chunks/vec2","../../../../../chunks/vec3","../../../../../chunks/vec3f64","../../../../../geometry/ellipsoidUtils","../../../../../geometry/support/axisAngle","../../../../../geometry/support/plane","../../../../../chunks/sphere","../../../camera/constraintUtils","../../../camera/constraintUtils/ConstraintTypes","../../../camera/constraintUtils/InteractionType","../../../camera/constraintUtils/TiltMode","../../../input/util","../InteractiveController","../momentum/PanPlanarMomentumController","../momentum/PanSphericalMomentumController","../momentum/RotationMomentumController","../momentum/ZoomPlanarMomentumController","../momentum/ZoomSphericalMomentumController","../../utils/navigationUtils","../../../webgl-engine/lib/Camera","../../../../navigation/PanPlanarMomentumEstimator","../../../../navigation/PanSphericalMomentumEstimator","../../../../navigation/RotationMomentumEstimator","../../../../navigation/ZoomMomentumEstimator"],(function(t,e,i,n,a,o,r,s,c,h,m,l,p,_,u,P,d,g,S,C,M,v,y,A,b,w,E,T,O,R,f,I,x,k,z,F){"use strict";t.PinchAndPanController=function(t){function i(){var e;return(e=t.apply(this,arguments)||this)._smoothRotation=new A.ExponentialFalloff(.05),e._rotationAxis=u.create(),e._beginAngle=0,e._beginHeading=0,e._panningPlane=g.create(),e._beginRadius=0,e._smoothScaling=new A.ExponentialFalloff(.05),e._zoomCenterScreen=o.createScreenPointArray(),e._zoomMomentumEstimator=new F.ZoomMomentumEstimator,e._rotationMomentumEstimator=new z.RotationMomentumEstimator,e._panSphericalMomentumEstimator=new k.PanSphericalMomentumEstimator,e._panPlanarMomentumEstimator=new x.PanPlanarMomentumEstimator,e._adjustedSphere=S.create(),e._tmp3d=u.create(),e._tmpScreenPointArray=o.createScreenPointArray(),e._beginScreenPoint=o.createScreenPointArray(),e._beginScenePoint=u.create(),e._screenPickPoint=o.createScreenPointArray(),e._scenePickPoint=u.create(),e._mode=f.NavigationMode.Horizontal,e._sphere=S.create(),e._pointerCount=0,e._tmpInteractionDirection=u.create(),e._constraintOptions={selection:M.ConstraintTypes.ALL,interactionType:v.InteractionType.NONE,interactionFactor:0,interactionStartCamera:new I.Camera,interactionDirection:null,tiltMode:y.TiltMode.TUMBLE},e}e._inherits(i,t);var r=i.prototype;return r.begin=function(t){if(!this.active)return;const e=this.view.navigation.momentumEnabled;this._zoomMomentumEstimator.enabled=e,this._rotationMomentumEstimator.enabled=e,this._panPlanarMomentumEstimator.enabled=e,this._panSphericalMomentumEstimator.enabled=e,this._beginHeading=-n.cyclicalPI.normalize(a.deg2rad(this.view.camera.heading)),this._beginRadius=t.radius,this._pointerCount=t.pointers.size,this._beginAngle=t.angle,this._smoothRotation.reset(),o.screenPointObjectToArray(t.center,this._screenPickPoint),p.copy(this._beginScreenPoint,this._screenPickPoint);const i=P.getReferenceEllipsoid(this.view.spatialReference),r=f.pickPointAndInitSphere(this._intersectionHelper,this.startCamera,this._screenPickPoint,i,f.SpherePickPointFallback.Silhouette,0===this.view.map.ground.opacity?f.contentIntersectorOptions:{});null!=r.scenePickPoint&&(this._scenePickPoint=r.scenePickPoint,this._sphere=r.sphere,_.copy(this._beginScenePoint,this._scenePickPoint),this._mode=f.decideNavigationMode(this.startCamera,this._screenPickPoint,i),this._mode===f.NavigationMode.Vertical&&this._preparePlanarPanMode(t,r.hasGeometryIntersection),this._constraintOptions.interactionStartCamera?.copyFrom(this.startCamera))},r.update=function(t){if(!this.active)return;this.currentCamera.copyFrom(this.startCamera);const e=t.pointers.size>1;this._mode===f.NavigationMode.Horizontal?(e&&this._zoomSpherical(t),this._panningSpherical(t),e&&this._rotateSpherical(t)):(e&&this._zoomPlanar(t),this._panningPlanar(t),e&&this._rotatePlanar(t)),this.commitCamera()},r.end=function(t){t.pointers.size===this._pointerCount&&this.update(t),this.finishController();const e=this._zoomMomentumEstimator.evaluateMomentum();if(e)return this._mode===f.NavigationMode.Horizontal?new R.ZoomSphericalMomentumController({view:this.view,momentum:e,screenCenter:this._zoomCenterScreen,sceneCenter:this._beginScenePoint,radius:this._sphere[3]}):new O.ZoomPlanarMomentumController({view:this.view,momentum:e,zoomCenter:this._beginScenePoint});const i=this._rotationMomentumEstimator.evaluateMomentum();if(i)return new T.RotationMomentumController({view:this.view,momentum:i,center:this._sphere,axis:this._rotationAxis});if(this._mode===f.NavigationMode.Horizontal){const t=this._panSphericalMomentumEstimator.evaluateMomentum();if(t)return new E.PanSphericalMomentumController({view:this.view,momentum:t})}else{const t=this._panPlanarMomentumEstimator.evaluateMomentum();if(t)return new w.PanPlanarMomentumController({view:this.view,momentum:t})}return null},r._preparePlanarPanMode=function(t,e){const i=_.negate(this._tmp3d,this.startCamera.viewForward);g.fromPositionAndNormal(this._scenePickPoint,i,this._panningPlane);const n=o.createScreenPointArray(this._screenPickPoint[0],0),a=u.create(),r=_.length(this.startCamera.eye);this._adjustedSphere[3]=r<this._sphere[3]?r-100:this._sphere[3],f.sphereOrPlanePointFromScreenPoint(this._adjustedSphere,this.startCamera,n,a);const s=o.createRenderScreenPointArray3();this.startCamera.projectToRenderScreen(a,s);const c=u.create(),h=u.create(),m=u.create();_.subtract(c,this._scenePickPoint,this.currentCamera.eye);const l=_.length(c);_.normalize(c,c);const p=f.PAN_DISTANCE_MODIFIER*Math.max(Math.abs(this.view.camera.position.z),f.MIN_HEIGHT_LIMIT),P=this.view._stage.renderView.getMinimalDepthForArea(null,this._screenPickPoint[0],this._screenPickPoint[1],this.view.state.camera,f.SCREEN_PIXEL_AREA);let d=null!=P?P:p;d=e?Math.min(d,l):d,_.copy(m,_.add(h,this.currentCamera.eye,_.scale(h,c,d))),this._panningPlane[3]=-_.dot(g.normal(this._panningPlane),m),this.startCamera.center=_.add(h,this.startCamera.eye,_.scale(h,this.startCamera.viewForward,d));const S=o.screenPointObjectToArray(t.center,this._tmpScreenPointArray);f.intersectPlaneFromScreenPointAtEye(this._panningPlane,this.startCamera,S,this._beginScenePoint)},r._zoomSpherical=function(t){const e=this._beginRadius/t.radius,i=.001875*Math.min(Math.max(t.radius,40),120);this._smoothScaling.gain=i,this._smoothScaling.update(e),f.applyZoomOnSphere(this._sphere,this.currentCamera,this._smoothScaling.value),o.screenPointObjectToArray(t.center,this._zoomCenterScreen),this._zoomMomentumEstimator.add(this._smoothScaling.value,.001*t.timestamp),this._constraintOptions.interactionType=v.InteractionType.ZOOM,this._constraintOptions.interactionFactor=C.pixelDistanceToInteractionFactor(t.radius-this._beginRadius),C.applyAll(this.view,this.currentCamera,this._constraintOptions)},r._panningSpherical=function(t){const e=o.screenPointObjectToArray(t.center,this._tmpScreenPointArray);f.sphereOrPlanePointFromScreenPoint(this._sphere,this.currentCamera,e,this._tmp3d),f.preserveHeadingThreshold(this._beginScenePoint,_.dot(this.currentCamera.up,this._beginScenePoint),this._sphere[3],this._beginHeading,this.view.camera.tilt,this.startCamera)?(f.applyPanSphericalPreserveHeading(this._sphere,this.currentCamera,this._beginScenePoint,this._tmp3d,this._beginHeading,this.view.camera.tilt,!1),this._panSphericalMomentumEstimator.addMomentumPreserveHeading(e,this._tmp3d,.001*t.timestamp,this.startCamera,this._sphere,this._beginHeading,this.view.camera.tilt)):(f.applyPanSphericalDirectRotation(this._sphere,this.currentCamera,this._beginScenePoint,this._tmp3d,this.view.camera.tilt,!1),this._panSphericalMomentumEstimator.addMomentumDirectRotation(e,this._tmp3d,.001*t.timestamp,this.startCamera,this._sphere[3],this.view.camera.tilt)),this._constraintOptions.interactionType=v.InteractionType.PAN,this._constraintOptions.interactionFactor=C.pixelDistanceToInteractionFactor(p.distance(this._screenPickPoint,e)),C.applyAll(this.view,this.currentCamera,this._constraintOptions)},r._rotateSpherical=function(t){_.normalize(this._rotationAxis,this._scenePickPoint),this.currentCamera.aboveGround||_.negate(this._rotationAxis,this._rotationAxis);const e=this._smoothRotation.value,i=e+f.normalizeRotationDelta(t.angle-e),n=.00125*Math.min(Math.max(t.radius,40),120);this._smoothRotation.gain=n,this._smoothRotation.update(i);const a=this._smoothRotation.value-this._beginAngle;this._rotationMomentumEstimator.add(a,.001*t.timestamp),f.applyRotation(this.currentCamera,this._sphere,d.wrapAxisAngle(this._rotationAxis,a)),this._constraintOptions.interactionType=v.InteractionType.TUMBLE,this._constraintOptions.interactionFactor=C.pixelDistanceToInteractionFactor(t.radius*i),C.applyAll(this.view,this.currentCamera,this._constraintOptions)},r._panningPlanar=function(t){const e=o.screenPointObjectToArray(t.center,this._tmpScreenPointArray);f.intersectPlaneFromScreenPointAtEye(this._panningPlane,this.currentCamera,e,this._tmp3d)&&(f.applyPanPlanar(this.currentCamera,this._beginScenePoint,this._tmp3d),this._panPlanarMomentumEstimator.add(e,this._tmp3d,.001*t.timestamp),this._constraintOptions.interactionType=v.InteractionType.PAN,this._constraintOptions.interactionFactor=C.pixelDistanceToInteractionFactor(p.distance(this._beginScreenPoint,e)),this._constraintOptions.interactionDirection=this.view.renderCoordsHelper.worldUpAtPosition(this.currentCamera.eye,this._tmpInteractionDirection),C.applyAll(this.view,this.currentCamera,this._constraintOptions),this._constraintOptions.interactionDirection=null)},r._zoomPlanar=function(t){const e=this._beginRadius/t.radius,i=.001875*Math.min(Math.max(t.radius,40),120);this._smoothScaling.gain=i,this._smoothScaling.update(e),this._zoomMomentumEstimator.add(this._smoothScaling.value,.001*t.timestamp),f.applyZoomToPoint(this.currentCamera,this._beginScenePoint,this._smoothScaling.value,this.view.state.constraints.minimumPoiDistance),this._constraintOptions.interactionType=v.InteractionType.ZOOM,this._constraintOptions.interactionFactor=C.pixelDistanceToInteractionFactor(t.radius-this._beginRadius),C.applyAll(this.view,this.currentCamera,this._constraintOptions)},r._rotatePlanar=function(t){_.copy(this._rotationAxis,this._beginScenePoint),this.currentCamera.aboveGround||_.negate(this._rotationAxis,this._rotationAxis);const e=this._smoothRotation.value;let i=t.angle-e;i=f.normalizeRotationDelta(i);const n=e+i,a=.00125*Math.min(Math.max(t.radius,40),120);this._smoothRotation.gain=a,this._smoothRotation.update(n);const o=this._smoothRotation.value-this._beginAngle;this._rotationMomentumEstimator.add(o,.001*t.timestamp),f.applyRotation(this.currentCamera,this._sphere,d.wrapAxisAngle(this._rotationAxis,o)),this._constraintOptions.interactionType=v.InteractionType.TUMBLE,this._constraintOptions.interactionFactor=C.pixelDistanceToInteractionFactor(t.radius*o),C.applyAll(this.view,this.currentCamera,this._constraintOptions)},e._createClass(i,[{key:"_intersectionHelper",get:function(){return this.view.sceneIntersectionHelper}}]),i}(b.InteractiveController),t.PinchAndPanController=i.__decorate([l.subclass("esri.views.3d.state.controllers.global.PinchAndPanController")],t.PinchAndPanController),Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
