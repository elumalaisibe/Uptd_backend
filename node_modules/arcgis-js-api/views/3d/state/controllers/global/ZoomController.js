/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/_rollupPluginBabelHelpers","../../../../../chunks/tslib.es6","../../../../../core/mathUtils","../../../../../core/screenUtils","../../../../../core/Logger","../../../../../core/accessorSupport/ensureType","../../../../../core/arrayUtils","../../../../../core/has","../../../../../core/Error","../../../../../core/accessorSupport/decorators/subclass","../../../../../chunks/vec2","../../../../../chunks/vec2f64","../../../../../chunks/vec3","../../../../../chunks/vec3f64","../../../../../geometry/ellipsoidUtils","../../../../../geometry/support/axisAngle","../../../../../chunks/sphere","../../../camera/constraintUtils","../../../camera/constraintUtils/ConstraintTypes","../../../camera/constraintUtils/InteractionType","../../../camera/constraintUtils/surfaceCollision","../../../camera/constraintUtils/TiltMode","../InteractiveController","../../utils/navigationUtils","../../../support/geometryUtils/ray"],(function(t,e,i,r,a,n,s,o,c,h,l,p,m,_,u,d,C,P,y,g,v,R,k,A,f,M){"use strict";t.ZoomController=function(t){function i(){var e;return(e=t.apply(this,arguments)||this)._pickPoint=u.create(),e._tmpP0=m.create(),e._panAxisAngle=C.create(),e._tmpRayDir=u.create(),e._tmpRayDirPick=u.create(),e._targetOnSphere=u.create(),e._navMode=f.NavigationMode.Horizontal,e._tmpRay={origin:u.create(),direction:u.create()},e.dragBeginPoint=a.createScreenPointArray(),e._normalizedAnchorPoint=m.create(),e._constraintOptions={selection:g.ConstraintTypes.ALL_EXCEPT_COLLISION,interactionType:v.InteractionType.ZOOM,interactionFactor:0,interactionStartCamera:null,interactionDirection:null,tiltMode:k.TiltMode.TUMBLE},e._sphere=P.create(),e._hasPickPoint=!1,e}e._inherits(i,t);var n=i.prototype;return n.begin=function(t){if(!this.active)return;p.copy(this.dragBeginPoint,t),f.normalizeCoordinate(this.startCamera,t,this._normalizedAnchorPoint);const e=d.getReferenceEllipsoid(this.view.spatialReference),i=f.pickPointAndInitSphere(this._intersectionHelper,this.startCamera,t,e,f.SpherePickPointFallback.Ellipsoid,0===this.view.map.ground.opacity?f.contentIntersectorOptions:{});if(this._navMode=f.decideNavigationMode(this.startCamera,t,e),this._navMode===f.NavigationMode.Horizontal)this._hasPickPoint=!!i.scenePickPoint,this._pickPoint=i.scenePickPoint??this._pickPoint,this._sphere=i.sphere;else{let e;M.fromScreenAtEye(this.startCamera,t,this._tmpRay),_.normalize(this._tmpRay.direction,this._tmpRay.direction),null!=i.scenePickPoint&&(_.subtract(this._tmpRayDirPick,this.startCamera.eye,i.scenePickPoint),e=_.length(this._tmpRayDirPick));const a=Math.abs(this.view.camera.position.z);this.view.renderCoordsHelper.worldUpAtPosition(this.startCamera.eye,D);let n=r.clamp(Math.min(f.PIVOT_DISTANCE_MODIFIER,1/Math.abs(_.dot(D,this._tmpRay.direction)))*a,f.DISTANCE_CLAMP_VALUES[0],f.DISTANCE_CLAMP_VALUES[1]);const s=this.view._stage.renderView.getMinimalDepthForArea(null,t[0],t[1],this.view.state.camera,f.SCREEN_PIXEL_AREA);n=null!=s?s:n,n=null!=e?Math.min(n,e):n,this._hasPickPoint=!0,_.scale(this._tmpRay.direction,this._tmpRay.direction,n),_.add(this._pickPoint,this._tmpRay.origin,this._tmpRay.direction)}this._constraintOptions.interactionStartCamera=this.startCamera},n.update=function(t){if(this.active){if(this.currentCamera.eye=this.startCamera.eye,this.currentCamera.center=this.startCamera.center,this.currentCamera.up=this.startCamera.up,this._navMode===f.NavigationMode.Horizontal){_.subtract(this._tmpRayDir,this.currentCamera.center,this.currentCamera.eye);const e=_.length(this._tmpRayDir);f.normalizeCoordinate(this.currentCamera,t,this._tmpP0);const i=12*(this._normalizedAnchorPoint[1]-this._tmpP0[1]);let r=e*2**i;const a=this.view.state.constraints.minimumPoiDistance;if(i<0&&r<a&&(r=a),Math.abs(e-r)<1e-6)return;if(this._hasPickPoint&&r<e){const t=1-(1-r/e)*(1-this._sphere[3]/_.length(this.currentCamera.center));this.currentCamera.center=_.scale(S,this.currentCamera.center,t)}_.scale(this._tmpRayDir,this._tmpRayDir,-r/e),this.currentCamera.eye=_.add(S,this.currentCamera.center,this._tmpRayDir),this._constraintOptions.interactionFactor=y.pixelDistanceToInteractionFactor(p.distance(this.dragBeginPoint,t)),y.applyAll(this.view,this.currentCamera,this._constraintOptions),this._hasPickPoint&&(f.sphereOrPlanePointFromScreenPoint(this._sphere,this.currentCamera,this.dragBeginPoint,this._targetOnSphere),C.fromPoints(this._pickPoint,this._targetOnSphere,this._panAxisAngle),f.applyRotation(this.currentCamera,this._sphere,this._panAxisAngle))}else{const e=_.length(this._tmpRay.direction);f.normalizeCoordinate(this.currentCamera,t,this._tmpP0);const i=12*(this._normalizedAnchorPoint[1]-this._tmpP0[1]);let r=e*2**i;const a=this.view.state.constraints.minimumPoiDistance;if(i<0&&r<a&&(r=a),Math.abs(e-r)<1e-6)return;_.scale(this._tmpRayDir,this._tmpRay.direction,1-r/e),this.currentCamera.eye=_.add(S,this.currentCamera.eye,this._tmpRayDir),this.currentCamera.center=_.add(S,this.currentCamera.center,this._tmpRayDir)}R.applySurfaceCollisionConstraint(this.view,this.currentCamera),this.commitCamera()}},n.end=function(){this.active&&this.finishController()},e._createClass(i,[{key:"_intersectionHelper",get:function(){return this.view.sceneIntersectionHelper}}]),i}(A.InteractiveController),t.ZoomController=i.__decorate([l.subclass("esri.views.3d.state.controllers.global.ZoomController")],t.ZoomController);const S=u.create(),D=u.create();Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
