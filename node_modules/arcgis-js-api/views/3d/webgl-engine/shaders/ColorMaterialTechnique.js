/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
define(["require","exports","../../../../chunks/_rollupPluginBabelHelpers","../../../../chunks/vec4f64","../core/shaderLibrary/ShaderOutput","../core/shaderTechnique/ReloadableShaderModule","../core/shaderTechnique/ShaderTechnique","../lib/DefaultVertexAttributeLocations","../lib/OrderIndependentTransparency","../lib/Program","../lib/StencilUtils","../lib/TransparencyPassType","../materials/VisualVariablePassParameters","../../../../chunks/ColorMaterial.glsl","../../../webgl/renderState"],(function(e,t,r,a,i,n,l,s,o,u,c,p,h,d,P){"use strict";let f=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).color=a.ZEROS,t}return r._inherits(t,e),r._createClass(t)}(h.VisualVariablePassParameters),g=function(e){function t(){return e.apply(this,arguments)||this}r._inherits(t,e);var a=t.prototype;return a.initializeProgram=function(e){return new u.Program(e.rctx,t.shader.get().build(this.configuration),s.Default3D)},a._createPipeline=function(e,t){const r=this.configuration,a=e===p.TransparencyPassType.NONE,n=e===p.TransparencyPassType.FrontFace;return P.makePipelineState({blending:r.output!==i.ShaderOutput.Color&&r.output!==i.ShaderOutput.Alpha||!r.transparent?null:a?o.blendingDefault:o.oitBlending(e),culling:P.cullingParams(r.cullFace),depthTest:{func:o.oitDepthTest(e)},depthWrite:(a||n)&&r.writeDepth?P.defaultDepthWriteParams:null,colorWrite:P.defaultColorWriteParams,stencilWrite:r.hasOccludees?c.stencilWriteMaskOn:null,stencilTest:r.hasOccludees?t?c.stencilToolMaskBaseParams:c.stencilBaseAllZerosParams:null,polygonOffset:a||n?r.polygonOffset?y:null:o.getOITPolygonOffset(r.enableOffset)})},a.initializePipeline=function(){return this._occludeePipelineState=this._createPipeline(this.configuration.transparencyPassType,!0),this._createPipeline(this.configuration.transparencyPassType,!1)},a.getPipelineState=function(e,a){return a?this._occludeePipelineState:r._get(r._getPrototypeOf(t.prototype),"getPipelineState",this).call(this,e,a)},r._createClass(t)}(l.ShaderTechnique);g.shader=new n.ReloadableShaderModule(d.ColorMaterial,(()=>new Promise(((t,r)=>e(["./ColorMaterial.glsl"],t,r)))));const y={factor:1,units:1};t.ColorMaterialPassParameters=f,t.ColorMaterialTechnique=g,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
