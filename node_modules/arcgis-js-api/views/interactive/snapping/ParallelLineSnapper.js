/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
define(["exports","../../../chunks/_rollupPluginBabelHelpers","../../../chunks/vec2","../../../chunks/vec2f64","../../../chunks/vec3f64","../../../support/elevationInfoUtils","./Settings","./SnappingAlgorithm","./SnappingPoint","./snappingUtils","./candidates/ParallelLineSnappingCandidate","../support/viewUtils","../../support/geometry2dUtils"],(function(e,t,n,i,o,r,a,s,l,c,p,d,h){"use strict";let g=function(e){function i(){return e.apply(this,arguments)||this}t._inherits(i,e);var s=i.prototype;return s.snapNewVertex=function(e,t){const n=t.editGeometryOperations.data.components[0],i=n.edges.length,o=n.vertices.length,a=[];if(i<2)return a;const{view:s}=this,p=d.vectorToScreenPoint(e,t.spatialReference,r.absoluteHeightElevationInfo,s),h=l.anyMapPointToSnappingPoint(n.vertices[o-1].pos,s,t),g=l.anyMapPointToSnappingPoint(n.vertices[0].pos,s,t),u=n.edges[i-1];let f=u;do{if(this.edgeExceedsShortLineThreshold(f,t)){const n=c.editEdgeToSnappingEdge(f,s,t);this._checkEdgeForParallelLines(n,h,e,p,t,a),this._checkEdgeForParallelLines(n,g,e,p,t,a)}f=f.leftVertex.leftEdge}while(f&&f!==u);return a},s.snapExistingVertex=function(e,t){const n=[],i=t.vertexHandle,o=i.component;if(o.edges.length<3)return n;const{view:a}=this,s=d.vectorToScreenPoint(e,t.spatialReference,r.absoluteHeightElevationInfo,a),p=i.leftEdge,h=i.rightEdge,g=o.vertices[0],u=l.anyMapPointToSnappingPoint(g.pos,a,t),f=o.vertices.length,P=o.vertices[f-1],v=l.anyMapPointToSnappingPoint(P.pos,a,t),S=o.edges[0];let T=S;do{if(T!==p&&T!==h&&this.edgeExceedsShortLineThreshold(T,t)){const o=c.editEdgeToSnappingEdge(T,a,t);p&&this._checkEdgeForParallelLines(o,l.anyMapPointToSnappingPoint(p.leftVertex.pos,a,t),e,s,t,n),h&&this._checkEdgeForParallelLines(o,l.anyMapPointToSnappingPoint(h.rightVertex.pos,a,t),e,s,t,n),i===g?this._checkEdgeForParallelLines(o,v,e,s,t,n):i===P&&this._checkEdgeForParallelLines(o,u,e,s,t,n)}T=T.rightVertex.rightEdge}while(T&&T!==S);return n},s._checkEdgeForParallelLines=function(e,t,i,s,g,f){const P=e.left,v=e.right;if(h.projectPointToLine(u,t,P,v),n.squaredDistance(u,t)<a.defaults.parallelLineThreshold)return;h.projectPointToLine(u,i,P,v,t);const{spatialReference:S,pointer:T}=g,E=l.asSnappingPoint(o.fromValues(u[0],u[1],i[2]));if(c.squaredScreenDistance(s,d.vectorToScreenPoint(E,S,r.absoluteHeightElevationInfo,this.view))<this.squaredProximityThreshold(T)){if(this.isVertical(E,t)||this.isVertical(P,v))return;if(this._parallelToPreviousCandidate(e,f))return;f.push(new p.ParallelLineSnappingCandidate({referenceLine:e,lineStart:t,targetPoint:E,isDraped:"on-the-ground"===g.elevationInfo?.mode}))}},s._parallelToPreviousCandidate=function(e,t){const i=e.left,o=e.right;for(const r of t)if(h.projectPointToLine(u,o,r.constraint.start,r.constraint.end,i),n.squaredDistance(u,o)<a.defaults.parallelLineThreshold)return r.addReferenceLine(e),!0;return!1},t._createClass(i)}(s.SnappingAlgorithm);const u=i.create();e.ParallelLineSnapper=g,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
