/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
define(["../../../chunks/_rollupPluginBabelHelpers","../../../chunks/tslib.es6","../../../kernel","../../../core/Collection","../../../core/maybe","../../../core/reactiveUtils","../../../core/urlUtils","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/ensureType","../../../core/arrayUtils","../../../core/has","../../../core/accessorSupport/decorators/subclass","../../../geometry/Extent","../../../geometry/projection","../../../geometry/SpatialReference","../../../layers/support/kmlUtils","../../../rest/utils","../../../support/GraphicsCollection","../engine/Bitmap","../engine/BitmapContainer","./LayerView2D","./graphics/GraphicContainer","./graphics/GraphicsView2D","../../layers/LayerView","../../support/imageReprojection"],(function(e,i,t,a,s,l,o,n,r,h,p,c,y,d,u,m,g,_,w,b,V,f,v,S,C){"use strict";let I=e._createClass((function(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]})),x=function(i){function n(){var e;return(e=i.apply(this,arguments)||this)._bitmapIndex=new Map,e._mapImageContainer=new b.BitmapContainer,e._kmlVisualData=new I,e._fetchController=null,e.allVisiblePoints=new _.GraphicsCollection,e.allVisiblePolylines=new _.GraphicsCollection,e.allVisiblePolygons=new _.GraphicsCollection,e.allVisibleMapImages=new a,e}e._inherits(n,i);var r=n.prototype;return r.hitTest=async function(e,i){const t=this.layer;return[this._pointsView?.hitTest(e),this._polylinesView?.hitTest(e),this._polygonsView?.hitTest(e)].flat().filter(Boolean).map((i=>(i.layer=t,i.sourceLayer=t,{type:"graphic",graphic:i,layer:t,mapPoint:e})))},r.update=function(e){this._polygonsView&&this._polygonsView.processUpdate(e),this._polylinesView&&this._polylinesView.processUpdate(e),this._pointsView&&this._pointsView.processUpdate(e)},r.attach=function(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new v({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new f(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new v({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new f(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new v({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new f(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",(e=>{e.added.forEach((e=>this._addMapImage(e))),e.removed.forEach((e=>this._removeMapImage(e)))})),l.watch((()=>this.layer.visibleSublayers),(e=>{for(const[i,t]of this._kmlVisualData.allSublayers)t.visibility=0;for(const i of e){const e=this._kmlVisualData.allSublayers.get(i.id);e&&(e.visibility=1)}this._refreshCollections()}))]),this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new C.ImageReprojector},r.detach=function(){this._fetchController=s.abortMaybe(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=s.destroyMaybe(this._polygonsView),this._polylinesView=s.destroyMaybe(this._polylinesView),this._pointsView=s.destroyMaybe(this._pointsView),this._imageReprojector=s.destroyMaybe(this._imageReprojector)},r.moveStart=function(){},r.viewChange=function(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()},r.moveEnd=function(){},r.isUpdating=function(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating},r._addMapImage=function(e){(this.view.spatialReference?.isWGS84||this.view.spatialReference?.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(e.href,y.fromJSON(e.extent),this.view.spatialReference).then((i=>{const t=new w.Bitmap(i.bitmapData);t.x=i.extent.xmin,t.y=i.extent.ymax,t.resolution=i.extent.width/i.bitmapData.width,t.rotation=e.rotation,this._mapImageContainer.addChild(t),this._bitmapIndex.set(e,t)}))},r._getViewDependentUrl=async function(e,i){const{viewFormat:a,viewBoundScale:s,httpQuery:l}=e;if(null!=a){if(null==i)throw new Error("Loading this network link requires a view state.");let n;if(await d.load(),null!=s&&1!==s){const e=new y(i.extent);e.expand(s),n=e}else n=i.extent;n=d.project(n,u.WGS84);const r=d.project(n,u.WebMercator),h=n.xmin,p=n.xmax,c=n.ymin,m=n.ymax,_=i.size[0]*i.pixelRatio,w=i.size[1]*i.pixelRatio,b=Math.max(r.width,r.height),V={"[bboxWest]":h.toString(),"[bboxEast]":p.toString(),"[bboxSouth]":c.toString(),"[bboxNorth]":m.toString(),"[lookatLon]":n.center.x.toString(),"[lookatLat]":n.center.y.toString(),"[lookatRange]":b.toString(),"[lookatTilt]":"0","[lookatHeading]":i.rotation.toString(),"[lookatTerrainLon]":n.center.x.toString(),"[lookatTerrainLat]":n.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":n.center.x.toString(),"[cameraLat]":n.center.y.toString(),"[cameraAlt]":b.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":_.toString(),"[vertPixels]":w.toString(),"[terrainEnabled]":"0","[clientVersion]":t.version,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},f=e=>{for(const i in e){let t;for(t in V)e[i]=e[i].replace(t,V[t])}},v=o.queryToObject(a);f(v);let S={};null!=l&&(S=o.queryToObject(l),f(S));const C=g.parseUrl(e.href);C.query={...C.query,...v,...S};return`${C.path}?${o.objectToQuery(v)}`}return e.href},r._fetchService=async function(e){const i=new I;await this._loadVisualData(this.layer.url,i,e),this._kmlVisualData=i,this._refreshCollections()},r._refreshCollections=function(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e))),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e))),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e))),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e)))},r._isSublayerVisible=function(e){const i=this._kmlVisualData.allSublayers.get(e);return!!i?.visibility&&(-1===i.parentFolderId||this._isSublayerVisible(i.parentFolderId))},r._loadVisualData=function(e,i,t){return this._fetchParsedKML(e,t).then((async e=>{for(const a of e.sublayers){i.allSublayers.set(a.id,a);const e=a.points?await m.getGraphics(a.points):[],s=a.polylines?await m.getGraphics(a.polylines):[],l=a.polygons?await m.getGraphics(a.polygons):[],o=a.mapImages||[];if(i.allPoints.push(...e.map((e=>({item:e,sublayerId:a.id})))),i.allPolylines.push(...s.map((e=>({item:e,sublayerId:a.id})))),i.allPolygons.push(...l.map((e=>({item:e,sublayerId:a.id})))),i.allMapImages.push(...o.map((e=>({item:e,sublayerId:a.id})))),a.networkLink){const e=await this._getViewDependentUrl(a.networkLink,this.view.state);await this._loadVisualData(e,i,t)}}}))},r._fetchParsedKML=function(e,i){return m.fetchService(e,this.layer.spatialReference,this.layer.refreshInterval,i).then((e=>m.parseKML(e.data)))},r._removeMapImage=function(e){const i=this._bitmapIndex.get(e);i&&(this._mapImageContainer.removeChild(i),this._bitmapIndex.delete(e))},e._createClass(n)}(V.LayerView2DMixin(S));i.__decorate([n.property()],x.prototype,"_pointsView",void 0),i.__decorate([n.property()],x.prototype,"_polylinesView",void 0),i.__decorate([n.property()],x.prototype,"_polygonsView",void 0),i.__decorate([n.property()],x.prototype,"updating",void 0),x=i.__decorate([c.subclass("esri.views.2d.layers.KMLLayerView2D")],x);return x}));
