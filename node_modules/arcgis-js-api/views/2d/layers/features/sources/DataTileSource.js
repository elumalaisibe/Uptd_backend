/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/_rollupPluginBabelHelpers","../../../../../TimeExtent","../../../../../core/Evented","../../../../../core/has","../../../../../core/promiseUtils","../../../../../core/accessorSupport/diffUtils","../../../../../core/support/WatchUpdatingTracking","../../../../../rest/support/Query","./DataTileSubscription","../support/UpdateToken"],(function(e,t,s,i,r,o,n,u,c,a,d){"use strict";function h(e,t){const s=new Set;return e&&e.forEach((e=>s.add(e))),t&&t.forEach((e=>s.add(e))),s.has("*")?["*"]:Array.from(s)}let l=function(){function e(e){this.updatingHandles=new u.WatchUpdatingTracking,this.events=new i,this._resolver=o.createResolver(),this._didEdit=!1,this._subscriptions=new Map,this._outSR=e.outSR,this._serviceInfo=e.serviceInfo,this._onTileUpdateMessage=e.onMessage}var l=e.prototype;return l.destroy=function(){for(const e of this._subscriptions.values())e.abort();this.updatingHandles.destroy()},l._onMessage=async function(e){const t=this._subscriptions.get(e.id);if(!t)return;const s={...e,remove:e.remove??[],status:e.status??d.UpdateToken.empty()};return o.ignoreAbortErrors(this._onTileUpdateMessage(s,t.options))},l.update=function(e,t){const i=t.fields.length;t.outFields=h(this._schema?.outFields,t.outFields),t.outFields=t.outFields.length>=.75*i?["*"]:t.outFields,t.outFields.sort();const o=n.diff(this._schema,t);if(!o)return;r("esri-2d-update-debug")&&console.debug("Applying Update - Source:",o);const u="orderByFields"in this._serviceInfo&&this._serviceInfo.orderByFields?this._serviceInfo.orderByFields:this._serviceInfo.objectIdField+" ASC",c={returnCentroid:"esriGeometryPolygon"===this._serviceInfo.geometryType,returnGeometry:!0,timeReferenceUnknownClient:"stream"!==this._serviceInfo.type&&this._serviceInfo.timeReferenceUnknownClient,outFields:t.outFields,outSpatialReference:this._outSR,orderByFields:[u],where:t.definitionExpression||"1=1",gdbVersion:t.gdbVersion,historicMoment:t.historicMoment,timeExtent:t.timeExtent?s.fromJSON(t.timeExtent):null},a=this._schema&&n.hasDiff(o,"outFields");this._schema&&n.hasDiffAny(o,["timeExtent","definitionExpression","gdbVersion","historicMoment","customParameters"])&&(e.why.mesh.push("Layer filter and/or custom parameters changed"),e.why.source.push("Layer filter and/or custom parameters changed"),e.mesh=!0,e.source=!0,e.queryFilter=!0),a&&(e.why.source.push("Layer required fields changed"),e.source=!0),n.diff(c,this._queryInfo)&&(this._queryInfo=c),this._schema=t,this._resolver.resolve()},l.whenInitialized=function(){return this._resolver.promise},l.applyUpdate=async function(e){if(e.queryFilter||e.source&&this._didEdit)return this.refresh(e.version),void(this._didEdit=!1);this._subscriptions.forEach((t=>t.applyUpdate(e))),await this.resend()},l.refresh=function(e,t){for(const s of this._tiles())this.unsubscribe(s),this.subscribe(s,e)},l.subscribe=function(e,t){const s=new a.DataTileSubscription(e,t);this._subscriptions.set(e.id,s),this.updatingHandles.addPromise(s.done)},l.unsubscribe=function(e){const t=this.getSubscription(e.id);null!=t&&t.abort(),this._subscriptions.delete(e.id)},l.createQuery=function(e={}){const t=this._queryInfo.historicMoment?new Date(this._queryInfo.historicMoment):null;return new c({...this._queryInfo,historicMoment:t,...e})},l.getSubscription=function(e){return this._subscriptions.has(e)?this._subscriptions.get(e):null},l.queryLastEditDate=async function(){throw new Error("Service does not support query type")},l.query=async function(e,t){throw new Error("Service does not support query")},l._tiles=function*(){const e=Array.from(this._subscriptions.values());for(const t of e)yield t.tile},l.edit=async function(e,t){const s=Array.from(this._subscriptions.values()),i=s.map((({tile:e})=>e));for(const r of s)r.removeIds(t);if(e.length){const s=i.map((t=>{const s=this.createTileQuery(t);return s.objectIds=e,{tile:t,query:s}})).map((async({tile:e,query:t})=>({tile:e,result:await this.query(t,{query:{tile:r("esri-tiles-debug")?e.id.replaceAll("/","."):void 0}}),query:t}))),n=(await o.eachAlwaysValues(s)).map((async({tile:s,result:i})=>{if(!i.hasFeatures&&!t.length&&!e.length)return;const r=this._subscriptions.get(s.key.id);r&&r.edit(i,e)}));await o.eachAlways(n)}this._didEdit=!0},t._createClass(e,[{key:"subscriptions",get:function(){return this._subscriptions.values()}}]),e}();e.DataTileSource=l,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
