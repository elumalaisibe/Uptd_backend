/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
define(["exports","../../../../chunks/_rollupPluginBabelHelpers","../../../../core/Error","../../../../core/has","../../../../core/Logger","../../../../core/maybe","../../../../core/promiseUtils","./definitions","./DisplayId","./Utils","./util/debug","../../../webgl/enums","../../../webgl/FramebufferObject","../../../webgl/Texture","../../../webgl/TextureDescriptor"],(function(t,e,i,r,s,n,a,u,o,T,d,h,l,_,c){"use strict";const p=s.getLogger("esri.views.2d.engine.webgl.AttributeStoreView"),x=d.createDebugLogger(d.DEBUG_ATTR_UPDATES,p);let f=function(){function t(t,e,i){this._texture=null,this._lastTexture=null,this._fbos={},this.texelSize=4;const{buffer:r,pixelType:s,textureOnly:n}=t,a=T.getPixelArrayCtor(s);this.shared=i,this.pixelType=s,this.size=e,this.textureOnly=n,n||(this.data=new a(r)),this._resetRange()}var s=t.prototype;return s.destroy=function(){n.applySome(this._texture,(t=>t.dispose()));for(const t in this._fbos)n.applySome(this._fbos[t],(e=>{"0"===t&&e.detachColorTexture(),e.dispose()})),this._fbos[t]=null;this._texture=null},s.setData=function(t,e,i){const r=o.getDisplayIdTexel(t),s=this.data,n=r*this.texelSize+e;!s||n>=s.length||(s[n]=i,this.dirtyStart=Math.min(this.dirtyStart,r),this.dirtyEnd=Math.max(this.dirtyEnd,r))},s.getData=function(t,e){if(null==this.data)return null;const i=o.getDisplayIdTexel(t)*this.texelSize+e;return!this.data||i>=this.data.length?null:this.data[i]},s.getTexture=function(t){return this._texture??this._initTexture(t)},s.getFBO=function(t,e=0){if(!this._fbos[e]){const i=0===e?this.getTexture(t):this._textureDesc;this._fbos[e]=new l.FramebufferObject(t,i)}return this._fbos[e]},s.updateTexture=function(t,e){if(!this.locked){try{const e=this.dirtyStart,r=this.dirtyEnd;if(!this.hasDirty)return;this._resetRange();const s=this.data.buffer,n=this.getTexture(t),a=4,u=(e-e%this.size)/this.size,o=(r-r%this.size)/this.size,d=u,h=this.size,l=o,_=u*this.size*a,c=(h+l*this.size)*a-_,x=T.getPixelArrayCtor(this.pixelType),f=new x(s,_*x.BYTES_PER_ELEMENT,c),g=this.size,A=l-d+1;if(A>this.size)return void p.error(new i("mapview-webgl","Out-of-bounds index when updating AttributeData"));n.updateData(0,0,d,g,A,f)}catch(r){}e()}},s.update=function(t){const{data:e,start:i,end:r}=t;if(null!=e&&null!=this.data){const r=this.data,s=i*this.texelSize;for(let i=0;i<e.length;i++){const n=1<<i%this.texelSize;t.layout&n&&(r[s+i]=e[i])}}this.dirtyStart=Math.min(this.dirtyStart,i),this.dirtyEnd=Math.max(this.dirtyEnd,r)},s.resize=function(t,e){const i=this.size;if(this.size=e,this.textureOnly)return void(i!==this.size&&(this._lastTexture=this._texture,this._texture=null));const r=T.getPixelArrayCtor(this.pixelType);this.destroy(),this.data=new r(t.buffer)},s._resetRange=function(){this.dirtyStart=2147483647,this.dirtyEnd=0},s._initTexture=function(t){const e=new _.Texture(t,this._textureDesc,this.data??void 0);if(null!=this._lastTexture&&this._fbos[0]){const i=this._lastTexture.descriptor.width,r=this._lastTexture.descriptor.height,s=this._lastTexture.descriptor.dataType,n=this._lastTexture.descriptor.pixelFormat,a=this.getFBO(t),u=T.getPixelBytes(s),o=new(T.getPixelArrayCtor(s))(new ArrayBuffer(i*r*u*this.texelSize)),d=t.getBoundFramebufferObject(),{x:h,y:l,width:_,height:c}=t.getViewport();t.bindFramebuffer(a),a.readPixels(0,0,i,r,n,s,o),e.updateData(0,0,0,2*i,r/2,o),t.setViewport(h,l,_,c),t.bindFramebuffer(d)}return this.destroy(),this._texture=e,this._texture},e._createClass(t,[{key:"_textureDesc",get:function(){const t=new c.TextureDescriptor;return t.wrapMode=h.TextureWrapMode.CLAMP_TO_EDGE,t.samplingMode=h.TextureSamplingMode.NEAREST,t.dataType=this.pixelType,t.width=this.size,t.height=this.size,t}},{key:"locked",get:function(){return!(this.pixelType!==h.PixelType.UNSIGNED_BYTE||!this.shared||this.textureOnly||!r("esri-atomics")||!this.data)&&1===Atomics.load(this.data,0)}},{key:"hasDirty",get:function(){const t=this.dirtyStart;return this.dirtyEnd>=t}}]),t}(),g=function(){function t(t){this._onUpdate=t,this._initialized=!1,this._forceNextUpload=!1,this._locked=!1}var s=t.prototype;return s.initialize=function(t){const{blocks:e,shared:i,size:r}=t;if(this.shared=i,this.size=r,x("Initializing AttributeStoreView",t),null==this._data)this._data=n.mapMany(e,(t=>new f(t,r,i)));else for(let s=0;s<this._data.length;s++){const t=this._data[s],n=e[s];null!=n&&(null==t?this._data[s]=new f(n,r,i):t.resize(n,r))}this._initialized=!0},s.destroy=function(){n.applySome(this._data,(t=>n.mapMany(t,(t=>t.destroy())))),n.applySome(this._defaultTexture,(t=>t.dispose()))},s.isEmpty=function(){return null==this._data},s.isUpdating=function(){const t=null!=this._pendingAttributeUpdate,e=t;return r("esri-2d-log-updating")&&console.log(`Updating AttributeStoreView ${e}\n  -> hasPendingUpdate ${t}`),e},s.getBlock=function(t){if(null==this._data)return null;return this._data[t]},s.setLabelMinZoom=function(t,e){this.setData(t,0,1,e)},s.getLabelMinZoom=function(t){return this.getData(t,0,1,255)},s.getFilterFlags=function(t){return this.getData(t,0,0,0)},s.getVVSize=function(t){return this.getData(t,u.ATTRIBUTE_DATA_VV,0,0)},s.getData=function(t,e,i,r){if(!this._data)return 0;const s=this._data[e];if(null==s)return 0;const n=s.getData(t,i);return null!=n?n:r},s.setData=function(t,e,i,r){this._data[e].setData(t,i,r)},s.lockTextureUpload=function(){this._locked=!0},s.unlockTextureUpload=function(){this._locked=!1},s.forceTextureUpload=function(){this._forceNextUpload=!0},s.requestUpdate=async function(t){if(this._pendingAttributeUpdate)return void p.error(new i("mapview-webgl","Tried to update attribute data with a pending update"));const e=a.createResolver();return x("AttributeStoreView Update Requested",t),this._pendingAttributeUpdate={data:t,resolver:e},this._onUpdate(),e.promise},s.update=function(){if(this._initialized&&null!=this._pendingAttributeUpdate){r("esri-2d-update-debug")&&console.debug("AttributeStoreView::update");const{data:t,resolver:e}=this._pendingAttributeUpdate,i=this._data;for(let r=0;r<t.blocks.length;r++){const e=t.blocks[r],s=i[r];n.applySome(s,(t=>n.applySome(e,(e=>{x(`Updating block ${r}`,e),t.update(e)}))))}this._pendingAttributeUpdate=null,e(),this._onUpdate()}},s.bindTextures=function(t,e=!0){const i=this._getDefaultTexture(t);if(!this._initialized)return t.bindTexture(i,u.TEXTURE_BINDING_ATTRIBUTE_DATA_0),void(e&&(t.bindTexture(i,u.TEXTURE_BINDING_ATTRIBUTE_DATA_1),t.bindTexture(i,u.TEXTURE_BINDING_ATTRIBUTE_DATA_2),t.bindTexture(i,u.TEXTURE_BINDING_ATTRIBUTE_DATA_3),t.bindTexture(i,u.TEXTURE_BINDING_ATTRIBUTE_DATA_4),t.bindTexture(i,u.TEXTURE_BINDING_ATTRIBUTE_DATA_5),t.bindTexture(i,u.TEXTURE_BINDING_GPGPU)));const r=this._data;this._locked&&!this._forceNextUpload||(n.forEachSome(r,(e=>e.updateTexture(t,(()=>this._onUpdate())))),this._forceNextUpload=!1),t.bindTexture(r[u.ATTRIBUTE_DATA_FILTER_FLAGS]?.getTexture(t)??i,u.TEXTURE_BINDING_ATTRIBUTE_DATA_0),e&&(t.bindTexture(r[u.ATTRIBUTE_DATA_GPGPU]?.getTexture(t)??i,u.TEXTURE_BINDING_GPGPU),t.bindTexture(r[u.ATTRIBUTE_DATA_ANIMATION]?.getTexture(t)??i,u.TEXTURE_BINDING_ATTRIBUTE_DATA_1),t.bindTexture(r[u.ATTRIBUTE_DATA_VV]?.getTexture(t)??i,u.TEXTURE_BINDING_ATTRIBUTE_DATA_2),t.bindTexture(r[u.ATTRIBUTE_DATA_DD1]?.getTexture(t)??i,u.TEXTURE_BINDING_ATTRIBUTE_DATA_3),t.bindTexture(r[u.TEXTURE_BINDING_ATTRIBUTE_DATA_4]?.getTexture(t)??i,u.TEXTURE_BINDING_ATTRIBUTE_DATA_4),t.bindTexture(r[u.TEXTURE_BINDING_ATTRIBUTE_DATA_5]?.getTexture(t)??i,u.TEXTURE_BINDING_ATTRIBUTE_DATA_5))},s._getDefaultTexture=function(t){if(null==this._defaultTexture){const e=new c.TextureDescriptor;e.wrapMode=h.TextureWrapMode.CLAMP_TO_EDGE,e.samplingMode=h.TextureSamplingMode.NEAREST,e.width=1,e.height=1,this._defaultTexture=new _.Texture(t,e,new Uint8Array(4))}return this._defaultTexture},e._createClass(t)}();t.AttributeStoreView=g,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
