/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
define(["../../../../../../chunks/_rollupPluginBabelHelpers","../../../../../../core/screenUtils","../../../../../../symbols/cim/utils","../../color","../../definitions","../../number","../../materialKey/MaterialKey","./util","./WGLBaseLineTemplate","./WGLDynamicMeshTemplate","../../util/Result"],(function(e,t,i,s,a,l,r,o,n,_,c){"use strict";return function(n){function _(e,r,_){var c;(c=n.call(this,e)||this)._minMaxZoom=l.i1616to32(Math.round(r*a.MIN_MAX_ZOOM_PRECISION_FACTOR),Math.round(_*a.MIN_MAX_ZOOM_PRECISION_FACTOR)),c._cimLineLayer=e;let h=0;i.isFeatureValueFn(e.width)||(h=.5*t.pt2px(e.width));const p=(s,a,l)=>i.isFeatureValueFn(e.width)?.5*t.pt2px(e.width(s,a,l)):h;c._dynamicPropertyMap.set("_halfWidth",p),i.isFeatureValueFn(e.cap)?c._dynamicPropertyMap.set("_capType",e.cap):c._capType=e.cap,i.isFeatureValueFn(e.join)?c._dynamicPropertyMap.set("_joinType",e.join):c._joinType=e.join;const u=e.color;if(i.isFeatureValueFn(u)){const e=(e,t,i)=>s.premultiplyAlphaRGBA(u(e,t,i));c._dynamicPropertyMap.set("_fillColor",e)}else c._fillColor=u&&s.premultiplyAlphaRGBA(u)||0;const m=e.miterLimit;if(i.isFeatureValueFn(m)){const e=(e,t,i)=>o.getLimitCosine(m(e,t,i));c._dynamicPropertyMap.set("_miterLimitCosine",e)}else c._miterLimitCosine=o.getLimitCosine(m);if(null!=e.effects){const t=e.effects;i.isFeatureValueFn(t)?c._dynamicPropertyMap.set("_effects",t):c._effects=t}c._scaleFactor=e.scaleFactor||1,c._isDashed=null!=e.dashTemplate;const f=e.colorLocked?a.BITSET_GENERIC_LOCK_COLOR:0,y=e.scaleDash?a.BITSET_LINE_SCALE_DASH:0,d=e.sampleAlphaOnly?a.BITSET_GENERIC_CONSIDER_ALPHA_ONLY:0;return c.tessellationProperties._bitset=f|y|d,c._materialKey=e.materialKey,c._initializeTessellator(!0),c}return e._inherits(_,n),_.fromCIMLine=function(e,t){const[i,s]=o.getMinMaxZoom(e.scaleInfo,t);return new _(e,i,s)},_.prototype.bindFeature=function(e,t,i){const s=e.readLegacyFeature();this._dynamicPropertyMap.forEach(((e,a)=>{this[a]=e(s,t,i)})),this._halfWidth*=this._scaleFactor;const o=this._materialCache,n=(0,this._cimLineLayer.materialHash)(s,t,i),_=o.get(n);let h=null;if(_&&c.ok(_.spriteMosaicItem)&&(h=_.spriteMosaicItem),h){this._hasPattern=!0;const{rect:e,width:t,height:i}=h,s=e.x+a.SPRITE_PADDING,r=e.y+a.SPRITE_PADDING,o=s+t,n=r+i;this.tessellationProperties._tl=l.i1616to32(s,r),this.tessellationProperties._br=l.i1616to32(o,n)}else this._hasPattern=!1,this.tessellationProperties._tl=0,this.tessellationProperties._br=0;this.tessellationProperties._fillColor=this._fillColor,this.tessellationProperties._halfWidth=this._halfWidth,this.tessellationProperties.offset=0,this.tessellationProperties._halfReferenceWidth=this.tessellationProperties._halfWidth;const p=r.LineMaterialKey.load(this._materialKey);h&&(p.sdf=h.sdf,p.pattern=!0,p.textureBinding=h.textureBinding),this._materialKey=p.data},e._createClass(_)}(n(_))}));
