/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
define(["exports","../../../../request","../../../../core/Error","../../../../core/Logger","../../../../core/promiseUtils","../../../../core/urlUtils","../../../../core/uuid","../../../../geometry/support/meshUtils/External","./uploads","../../../support/infoFor3D"],(function(e,t,r,s,a,o,n,i,u,l){"use strict";async function c(e,t,r){return e.length?Promise.all(e.map((e=>p(e,t,r)))):[]}async function p(e,{layer:t,ongoingUploads:s},a){const o=s.get(e);if(o)return o;if(!U(t))throw new r(`${t.type}-layer:upload-failure`,"Layer does not support asset uploads.",new Error);if(d(e,t))return e;const n=f(e,t,a);s.set(e,n);try{await n}finally{s.delete(e)}return e}function d(e,t){const{parsedUrl:r}=t;return null!=r&&e.metadata.externalSources.some((e=>i.externalIsOnService(e,r)))}async function f(e,t,r){const{metadata:s}=e,{displaySource:o}=s,n=b(o?.source,t),i=!!n,u=s.externalSources.length>0,l=i?y(n,t,r):u?w(e,t,r):m(e,t,r),c=await l;return a.throwIfAborted(r),e.addExternalSources([c]),e}async function y(e,t,r){return{source:await A(e,t,r),original:!0}}async function w(e,t,s){const a=x(t),{externalSources:o}=e.metadata,n=g(o,t);if(!n)throw new r(`${t.type}-layer:upload-failure`,"Could not find an external source that is supported by the service.",new Error);const i=await A(n,t,s);e.addExternalSources([{source:i,original:!0}]);return{source:await D(i,t,a)}}async function m(e,t,r){const s=h(e,t,r);return{source:await I([s],t,r),extent:e.extent.clone(),original:!0}}async function h(e,t,r){const s=x(t),o=await e.load(r),i=await o.toBinaryGLTF({ignoreLocalTransform:!0});a.throwIfAborted(r);const u=await i.buffer();return a.throwIfAborted(r),{blob:new Blob([u.data],{type:u.type}),assetName:`${n.generateBracedUUID()}.glb`,assetType:s}}function g(e,t){for(const r of e){const e=b(r.source,t);if(e)return e}return null}function b(e,t){if(!e)return null;const{infoFor3D:{supportedFormats:r,editFormats:s}}=t,a=i.externalSourceToMultiPart(e),o=new Array;let n=!1;for(let i=0;i<a.length;++i){const e=T(a[i],r);if(!e)return null;s.includes(e.assetType)&&(n=!0),o.push(e)}return n?o:null}function T(e,t){const r=i.assetFormatId(e,t);return r?{asset:e,assetType:r}:null}async function A(e,t,r){return I(e.map((e=>F(e,r))),t,r)}async function I(e,t,r){const s=await Promise.all(e.map((async e=>{const s=E(await e,t,r);return a.throwIfAborted(r),s})));a.throwIfAborted(r);const{uploadResults:o}=await $(s.map((({item:e})=>e)),t,r);return a.throwIfAborted(r),e.map(((e,r)=>v(s[r],o[r],t)))}async function F(e,t){const{asset:r,assetType:s}=e;if(r instanceof File)return{blob:r,assetName:r.name,assetType:s};const o=await r.toBlob(t);return a.throwIfAborted(t),{blob:o,assetName:r.assetName,assetType:s}}async function E(e,t,n){const{blob:i,assetType:l,assetName:c}=e;let p=null;try{const e=await u.uploadItem({data:i,name:c},t.url,n);a.throwIfAborted(n),p={assetType:l,assetUploadId:e.itemID}}catch(d){a.throwIfAbortError(d),s.getLogger("esri.layers.graphics.sources.support.uploadAssets").warnOnce(`Service ${t.url} does not support the REST Uploads API.`)}if(!p){const e=await o.parseData(i);if(a.throwIfAborted(n),!e.isBase64)throw new r(`${t.type}-layer:uploadAssets-failure`,"Expected gltf data in base64 format after conversion.",new Error);p={assetType:l,assetData:e.data}}if(!p)throw new r(`${t.type}-layer:uploadAssets-failure`,"Unable to prepare uploadAsset request options.",new Error);return{item:p,assetName:c}}async function $(e,s,n){const i=await t(o.join(s.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"});if(a.throwIfAborted(n),i.data.uploadResults.length!==e.length)throw new r(`${s.type}-layer:uploadAssets-failure`,`Bad response. Uploaded ${e.length} items and received ${i.data.uploadResults.length} results.`,new Error);return i.data}function v(e,t,s){const{success:a}=t;if(!a){const{error:a}=t;throw new r(`${s.type}-layer:upload-failure`,`Failed to upload mesh file ${e.assetName}. Error code: ${a.code}. Error message: ${a.messages}`,new Error)}const{assetHash:o}=t,{assetName:n,item:{assetType:u}}=e,{infoFor3D:{supportedFormats:c}}=s,p=l.getFormatIdMimeType(u,c);if(!p)throw new r(`${s.type}-layer:upload-failure`,`The service allowed us to upload an asset of FormatID ${u}, but it does not list it in its supported formats.`,new Error);return new i.ServiceAsset(n,p,[new i.ServiceAssetPart(`${s.parsedUrl.path}/assets/${o}`,o)])}async function D(e,s,a){const n=e.map((({assetName:e,parts:t})=>({assetName:e,assetHash:t[0].partHash}))),u=s.capabilities?.operations.supportsAsyncConvert3D,c={query:{f:"json",assets:JSON.stringify(n),transportType:"esriTransportTypeUrl",targetFormat:a,async:u},responseType:"json",timeout:0},p=o.join(s.parsedUrl.path,"convert3D"),d=(u?await S(p,c):await t(p,c)).data,{infoFor3D:{supportedFormats:f}}=s;return d.assets.map((e=>{const t=l.getMimeTypeFormatId(e.contentType,f);if(!t)throw new r(`${s.type}-layer:upload-failure`,`The service allowed us to upload an asset of FormatID ${t}, but it does not list it in its supported formats.`,new Error);return new i.ServiceAsset(e.assetName,e.contentType,[new i.ServiceAssetPart(e.assetURL,e.assetHash)])}))}async function S(e,s){const o=(await t(e,s)).data.statusUrl;for(;;){const e=(await t(o,{query:{f:"json"},responseType:"json"})).data;switch(e.status){case"Completed":return t(e.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new r("async-convert3D-failed","asynchronous convert3D call failed.");case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new r("async-convert3D-failed","asynchronous convert3D call failed (undefined response status)")}await a.after(N)}}function U(e){return!!e.infoFor3D&&!!e.url}function x(e){const{infoFor3D:t}=e,s=l.getMimeTypeFormatId("model/gltf-binary",t.supportedFormats)??l.getFilenameFormatId("glb",t.supportedFormats);if(!s)throw new r(`${e.type}-layer:upload-failure`,"Layer does not support glb.",new Error);return s}const N=1e3;e.uploadAssets=c,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
