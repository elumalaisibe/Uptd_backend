/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
define(["../../../chunks/_rollupPluginBabelHelpers","../../../chunks/tslib.es6","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/ensureType","../../../core/arrayUtils","../../../core/has","../../../core/accessorSupport/decorators/subclass","./bandIndexUtils","./BaseRasterFunction","./ExtractBandFunctionArguments","./pixelUtils"],(function(t,n,e,s,r,a,o,i,u,l,c){"use strict";let d=function(n){function e(){var t;return(t=n.apply(this,arguments)||this).functionName="ExtractBand",t.functionArguments=null,t.rasterArgumentNames=["raster"],t}t._inherits(e,n);var s=e.prototype;return s._bindSourceRasters=function(){const{functionArguments:t,sourceRasterInfos:n}=this,e=n[0],{method:s,bandNames:r,bandWavelengths:a,bandIds:o,missingBandAction:i}=t,u=r?.length&&("name"===s||"id"!==s&&!o?.length),l=a?.length&&("wavelength"===s||"id"!==s&&!o?.length),d=i===c.MissingBandAction.fail,h=u?this._matchBandNames(e,r):l?this._matchBandWavelengths(e,a,d):this._matchBandIds(e,o,d);if(null==h){return{success:!1,supportsGPU:!1,error:`extract-band-function: Invalid ${u?"band names":l?"band wavelengths":"band ids"} for the imagery data source`}}this.functionArguments.bandIds=h,this.functionArguments.method="id",this.outputPixelType=this._getOutputPixelType("f32");const p=e.clone();p.pixelType=this.outputPixelType,p.bandCount=h.length;const{statistics:g,histograms:m}=p;null!=g&&g.length&&(p.statistics=h.map((t=>g[t]||g[g.length-1]))),null!=m&&m.length&&(p.histograms=h.map((t=>m[t]||m[m.length-1])));let f=p.keyProperties?.BandProperties;f?.length&&(f=h.map((t=>t>=f.length?f[f.length-1]:f[t])),p.keyProperties={...p.keyProperties,BandProperties:f}),this.rasterInfo=p;return{success:!0,supportsGPU:p.bandCount<=3}},s._processPixels=function(t){const n=t.pixelBlocks?.[0];if(null==n)return null;const e=n.pixels.length,s=this.functionArguments.bandIds.map((t=>t>=e?e-1:t));return n.extractBands(s)},s._getWebGLParameters=function(){let t;if(this.isInputBandIdsSwizzled)t=this.swizzledBandSelection.length?this.swizzledBandSelection:[0,1,2];else{t=[...this.functionArguments.bandIds],0===t.length?t=[0,1,2]:t.length<3&&(t[1]=t[1]??t[0],t[2]=t[2]??t[1]);for(let n=0;n<3;n++)t[n]=Math.min(t[n],2)}return{bandIndexMat3:i.getBandMatrix3(t)}},s._getInputBandIds=function(t){const n=t.length;return this.functionArguments.bandIds.map((t=>t>=n?n-1:t)).map((n=>t[n]))},s._matchBandNames=function(t,n){const e=t.bandInfos.map((({name:t})=>t.toLowerCase())),s=[];for(let r=0;r<n.length;r++){const t=n[r].toLowerCase();let a=e.indexOf(t);if(-1===a&&"nearinfrared"===t&&(a=e.findIndex((t=>t.startsWith("nearinfrared_1"))),-1===a&&(a=e.findIndex((t=>t.startsWith("nearinfrared"))))),-1===a)return null;s.push(a)}return s},s._matchBandIds=function(t,n,e){const{bandCount:s}=t;return!n?.length||e&&n.some((t=>t<0||t>=s))?null:n},s._matchBandWavelengths=function(t,n,e){const{bandInfos:s}=t,r=[];for(let i=0;i<s.length;i++){const{minWavelength:t,maxWavelength:n}=s[i];if(!t||!n)return null;r.push({minWavelength:t,maxWavelength:n})}const{wavelengthMatchTolerance:a}=this.functionArguments,o=[];for(let i=0;i<n.length;i++){const t=n[i];let s=!1,u=-1,l=Number.MAX_VALUE;for(let n=0;n<r.length;n++){const e=r[n],a=t>=e.minWavelength&&t<=e.maxWavelength,o=Math.abs(t-(e.minWavelength+e.maxWavelength)/2);a?o<l&&(s=!0,u=n,l=o):!s&&o<l&&(u=n,l=o)}if(!s&&a&&l<a&&(s=!0),!s&&e)return null;o.push(u)}return o},t._createClass(e)}(u);n.__decorate([e.property({json:{write:!0,name:"rasterFunction"}})],d.prototype,"functionName",void 0),n.__decorate([e.property({type:l,json:{write:!0,name:"rasterFunctionArguments"}})],d.prototype,"functionArguments",void 0),n.__decorate([e.property()],d.prototype,"rasterArgumentNames",void 0),d=n.__decorate([o.subclass("esri.layers.support.rasterFunctions.ExtractBandFunction")],d);return d}));
