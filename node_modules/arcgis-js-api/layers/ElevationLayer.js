/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
define(["require","../chunks/_rollupPluginBabelHelpers","../chunks/tslib.es6","../request","../core/Error","../core/maybe","../core/MultiOriginJSONSupport","../core/promiseUtils","../core/urlUtils","../core/accessorSupport/decorators/property","../core/accessorSupport/ensureType","../core/arrayUtils","../core/has","../core/accessorSupport/decorators/reader","../core/accessorSupport/decorators/subclass","../geometry/HeightModelInfo","./Layer","./mixins/ArcGISCachedService","./mixins/ArcGISService","./mixins/OperationalLayer","./mixins/PortalLayer","./support/commonProperties","./support/ElevationTileData","./support/LercDecoder"],(function(e,r,t,o,i,a,s,n,l,p,c,d,u,y,h,v,_,f,m,S,g,w,b,T){"use strict";let I=function(t){function s(...e){var r;return(r=t.call(this,...e)||this).capabilities={operations:{supportsTileMap:!1}},r.copyright=null,r.heightModelInfo=null,r.path=null,r.minScale=void 0,r.maxScale=void 0,r.opacity=1,r.operationalLayerType="ArcGISTiledElevationServiceLayer",r.sourceJSON=null,r.type="elevation",r.url=null,r.version=null,r._lercDecoder=T.acquireDecoder(),r}r._inherits(s,t);var p=s.prototype;return p.normalizeCtorArgs=function(e,r){return"string"==typeof e?{url:e,...r}:e},p.destroy=function(){this._lercDecoder=a.releaseMaybe(this._lercDecoder)},p.readCapabilities=function(e,r){const t=r.capabilities&&r.capabilities.split(",").map((e=>e.toLowerCase().trim()));if(!t)return{operations:{supportsTileMap:!1}};return{operations:{supportsTileMap:t.includes("tilemap")}}},p.readVersion=function(e,r){let t=r.currentVersion;return t||(t=9.3),t},p.load=function(e){const r=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:e=>{for(let r=0;r<e.typeKeywords.length;r++)if("elevation 3d layer"===e.typeKeywords[r].toLowerCase())return!0;throw new i("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},e).catch(n.throwIfAbortError).then((()=>this._fetchImageService(r)))),Promise.resolve(this)},p.fetchTile=function(e,r,t,i){const a=null!=(i=i||{signal:null}).signal?i.signal:i.signal=(new AbortController).signal,s={responseType:"array-buffer",signal:a},n={noDataValue:i.noDataValue,returnFileInfo:!0};return this.load().then((()=>this._fetchTileAvailability(e,r,t,i))).then((()=>o(this.getTileUrl(e,r,t),s))).then((e=>this._lercDecoder.decode(e.data,n,a))).then((e=>new b.ElevationTileData(e)))},p.getTileUrl=function(e,r,t){const o=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,i=l.objectToQuery({...this.parsedUrl.query,blankTile:!o&&null});return`${this.parsedUrl.path}/tile/${e}/${r}/${t}${i?"?"+i:""}`},p.queryElevation=async function(r,t){const{ElevationQuery:o}=await new Promise(((r,t)=>e(["./support/ElevationQuery"],r,t)));n.throwIfAborted(t);return(new o).query(this,r,t)},p.createElevationSampler=async function(r,t){const{ElevationQuery:o}=await new Promise(((r,t)=>e(["./support/ElevationQuery"],r,t)));n.throwIfAborted(t);return(new o).createSampler(this,r,t)},p._fetchTileAvailability=function(e,r,t,o){return this.tilemapCache?this.tilemapCache.fetchAvailability(e,r,t,o):Promise.resolve("unknown")},p._fetchImageService=async function(e){if(this.sourceJSON)return this.sourceJSON;const r={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:e},t=await o(this.parsedUrl.path,r);t.ssl&&(this.url=this.url?.replace(/^http:/i,"https:")),this.sourceJSON=t.data,this.read(t.data,{origin:"service",url:this.parsedUrl})},r._createClass(s,[{key:"hasOverriddenFetchTile",get:function(){return!this.fetchTile[O]}}]),s}(f.ArcGISCachedService(m.ArcGISService(S.OperationalLayer(g.PortalLayer(s.MultiOriginJSONMixin(_))))));t.__decorate([p.property({readOnly:!0})],I.prototype,"capabilities",void 0),t.__decorate([y.reader("service","capabilities",["capabilities"])],I.prototype,"readCapabilities",null),t.__decorate([p.property({json:{read:{source:"copyrightText"}}})],I.prototype,"copyright",void 0),t.__decorate([p.property({readOnly:!0,type:v})],I.prototype,"heightModelInfo",void 0),t.__decorate([p.property({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],I.prototype,"path",void 0),t.__decorate([p.property({type:["show","hide"]})],I.prototype,"listMode",void 0),t.__decorate([p.property({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],I.prototype,"minScale",void 0),t.__decorate([p.property({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],I.prototype,"maxScale",void 0),t.__decorate([p.property({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],I.prototype,"opacity",void 0),t.__decorate([p.property({type:["ArcGISTiledElevationServiceLayer"]})],I.prototype,"operationalLayerType",void 0),t.__decorate([p.property()],I.prototype,"sourceJSON",void 0),t.__decorate([p.property({json:{read:!1},value:"elevation",readOnly:!0})],I.prototype,"type",void 0),t.__decorate([p.property(w.url)],I.prototype,"url",void 0),t.__decorate([p.property()],I.prototype,"version",void 0),t.__decorate([y.reader("version",["currentVersion"])],I.prototype,"readVersion",null),I=t.__decorate([h.subclass("esri.layers.ElevationLayer")],I);const O=Symbol("default-fetch-tile");I.prototype.fetchTile[O]=!0;return I}));
