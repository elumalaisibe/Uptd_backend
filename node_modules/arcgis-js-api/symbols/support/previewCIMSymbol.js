/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
define(["exports","../../core/screenUtils","../cim/CIMSymbolHelper","../cim/CIMSymbolRasterizer","../cim/utils","./previewUtils","./renderUtils"],(function(e,t,i,l,r,n,o){"use strict";const a=new l.CIMSymbolRasterizer(null,!0),s=t.px2pt(n.SymbolSizeDefaults.size),y=t.px2pt(n.SymbolSizeDefaults.maxSize),c=t.px2pt(n.SymbolSizeDefaults.lineWidth),m=1;function u(e){const t=e?.size;if("number"==typeof t)return{width:t,height:t};return{width:null!=t&&"object"==typeof t&&"width"in t?t.width:null,height:null!=t&&"object"==typeof t&&"height"in t?t.height:null}}async function h(e,n={}){const{node:h,opacity:p,symbolConfig:d}=n,f=null!=d&&"object"==typeof d&&"isSquareFill"in d&&d.isSquareFill,b=n.cimOptions||n,g=b.geometryType||r.mapCIMSymbolToGeometryType(e?.data?.symbol),S=u(n),{feature:w,fieldMap:M}=b;if(null==S.width||null==S.height){const t=await i.OverrideHelper.resolveSymbolOverrides(e.data,w,null,M,g);if(!t)return null;(e=e.clone()).data={type:"CIMSymbolReference",symbol:t},e.data.primitiveOverrides=void 0;const l=[];i.CIMSymbolHelper.fetchResources(t,a.resourceManager,l),i.CIMSymbolHelper.fetchFonts(t,a.resourceManager,l),l.length>0&&await Promise.all(l);const r=i.CIMSymbolHelper.getEnvelope(t,null,a.resourceManager),n=r?.width,o=r?.height;S.width="esriGeometryPolygon"===g?s:"esriGeometryPolyline"===g?c:null!=n&&isFinite(n)?Math.min(n,y):s,S.height="esriGeometryPolygon"===g?s:null!=o&&isFinite(o)?Math.max(Math.min(o,y),m):s}const C=await a.rasterizeCIMSymbolAsync(e,w,S,f||"esriGeometryPolygon"!==g?l.GeometryStyle.Preview:l.GeometryStyle.Legend,M,g);if(!C)return null;const{width:v,height:I}=C,x=document.createElement("canvas");x.width=v,x.height=I;x.getContext("2d").putImageData(C,0,0);const z=t.pt2px(S.width),G=t.pt2px(S.height),L=new Image(z,G);L.src=x.toDataURL(),L.ariaLabel=n.ariaLabel??null,L.alt=n.ariaLabel??"",null!=p&&(L.style.opacity=`${p}`);let P=L;if(null!=n.effectView){const e={shape:{type:"image",x:0,y:0,width:z,height:G,src:L.src},fill:null,stroke:null,offset:[0,0]};P=o.renderSymbol([[e]],[z,G],{effectView:n.effectView,ariaLabel:n.ariaLabel})}return h&&P&&h.appendChild(P),P}e.previewCIMSymbol=h,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
