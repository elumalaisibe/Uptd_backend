/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
define(["require","../../../chunks/_rollupPluginBabelHelpers","../../../chunks/tslib.es6","../../../core/arrayUtils","../../../core/Error","../../../core/Logger","../../../core/maybe","../../../core/promiseUtils","../../../core/reactiveUtils","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/ensureType","../../../core/has","../../../core/accessorSupport/decorators/subclass","../../../geometry/support/quantizationUtils","../../../layers/support/fieldType","../../../layers/support/fieldUtils","../../../rest/support/QuantizationParameters","../../statistics/support/predominanceUtils","../../statistics/support/statsWorker","../../statistics/support/utils","../../statistics/support/WorkerClient","../utils","./LayerAdapter","./support/utils","../../../statistics/utils","../../../support/arcadeOnDemand"],(function(e,t,a,i,r,s,n,o,l,u,m,c,f,y,d,p,h,w,g,F,S,v,V,q,_,x){"use strict";const z=5;let I=null,L=function(a){function u(){var e;return(e=a.apply(this,arguments)||this)._hasLocalSource=!1,e.adapterName="in-memory-layer-adapter",e}t._inherits(u,a);var m=u.prototype;return m.destroy=function(){this.workerClient?.destroy()},m._waitForLayerViewUpdate=async function(e){if(!e)throw new r(`${this.adapterName}:insufficient-data", "layerView is required to fetch the features`);const t=new AbortController,a=l.whenOnce((()=>!e.updating),t.signal);await o.timeout(a,5e3,t).catch((e=>{throw s.getLogger(this).warn("LayerView is taking too long to update. Aborting fetch from layerView."),e}))},m._fetchFeatureSetFromMemory=async function(e,t,a){const i=this.layer;if(this._hasLocalSource)return i.queryFeatures(e);if(!t)throw new r(`${this.adapterName}:insufficient-data`,"view is required to fetch the features from layerView");const s=await t.whenLayerView(this.layer);return await this._waitForLayerViewUpdate(s),s.queryFeatures(e,{signal:a})},m._fetchFeaturesFromMemory=async function(e,t,a,i){const s=this.layer,n="json"===i;if(this._hasLocalSource){const e=await s.queryFeatures(t);return n?q.ensureFeaturesJSON(e.features):e.features}if(await this._waitForLayerViewUpdate(e),n&&"queryFeaturesJSON"in e&&e.queryFeaturesJSON){const{features:i}=await e.queryFeaturesJSON(t,{signal:a});return i}if(!("queryFeatures"in e))throw new r(`${this.adapterName}:not-supported`,"'queryFeatures' is not supported on the layerView");const o=await e.queryFeatures(t,{signal:a});return n?q.ensureFeaturesJSON(o.features):o.features},m._fetchFeaturesForStats=function(e,t){return v.getFieldsList({field:e.field,field2:e.field2,field3:e.field3,normalizationField:e.normalizationField,valueExpression:e.valueExpression}).then((a=>this.getSampleFeatures({sampleSize:-1,view:e.view,returnGeometry:e.returnGeometry,filter:e.filter,requiredFields:a,signal:e.signal},t)))},m._summaryStatsFromClientQuery=async function(e,t){const{view:a,signal:i}=e,r=q.getSummaryStatsQuery(this,e,t),s=await this._fetchFeatureSetFromMemory(r,a,i),n=q.getSummaryStatisticsFromFeatureSet(s,t);return _.processSummaryStatisticsResult(n)},m._getNormalizationTotalFromMemory=async function(e,t,a){const{featuresJSON:i,graphics:s,layerView:n,query:o}=t,l=(!i&&!s&&n&&"querySummaryStatistics"in n?await n.querySummaryStatistics(o,{field:e},{signal:a}):i?await this.workerClient.summaryStatistics({field:e},i):await g.summaryStatistics({attribute:{field:e},features:s??[]})).sum;if(null==l)throw new r(`${this.adapterName}:invalid`,"invalid normalizationTotal");return l},m._summaryStatsFromMemory=async function(e,t){const{view:a,field:i,valueExpression:r,normalizationType:s,signal:n}=e,o={field:i,valueExpression:r,normalizationType:s,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue},{featuresJSON:l,graphics:u,layerView:m,query:c,fieldInfos:f}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"querySummaryStatistics"});return r&&a&&(l||u)&&(o.fieldType=t?.type?d.kebabDict.toJSON(t.type):null,o.viewInfoParams=q.getViewInfoParams(a),o.fieldInfos=f),"percent-of-total"===s&&null==e.normalizationTotal&&(o.normalizationTotal=await this._getNormalizationTotalFromMemory(i,{featuresJSON:l,graphics:u,layerView:m,query:c},n)),!l&&!u&&m&&"querySummaryStatistics"in m?m.querySummaryStatistics(c,o,{signal:n}):l?this.workerClient.summaryStatistics(o,l):g.summaryStatistics({attribute:o,features:u})},m._getFilteredFeatures=async function(t,a){let i=[];if("intersects"===a?.spatialRelationship){const{intersect:r}=await new Promise(((t,a)=>e(["../../../geometry/geometryEngineAsync"],t,a))),s=null!=a.geometry?a.geometry:null;for(const e of t){const t=null!=e.geometry?e.geometry:null;if(t&&s){await r(t,s)&&i.push(e)}}}else i=t;return t.length&&"declaredClass"in t[0]&&"esri.Graphic"===t[0].declaredClass?{graphics:i}:{featuresJSON:i}},m._processStatsFromMemoryParams=async function(e){const{features:t,filter:a}=e;if(t?.length)return this._getFilteredFeatures(t,a);const{view:i,field:r,field2:s,field3:n,normalizationField:o,valueExpression:l,layerViewFunc:u,signal:m}=e;let c=e.returnGeometry;if(null==c&&l){if(!I){const{arcadeUtils:e}=await x.loadArcade();I=e}const e=I.hasGeometryOperations(l);e&&await I.enableGeometryOperations(),c=e}let f=null,y=null,d=null,p=null,h=null;if(i)try{f=await i.whenLayerView(this.layer),y=null!=u&&u in f&&"function"==typeof f[u]}catch{y=!1}if(y)try{await this._waitForLayerViewUpdate(f);const e=await v.getFieldsList({field:r,field2:s,field3:n,normalizationField:o,valueExpression:l});q.getMissingFields(this,e,f).length?y=!1:(d=this.layer.createQuery(),d.outFields=e,d.returnGeometry=!1,q.updateQueryWithFeatureFilter(d,a)),f.suspended&&(y=!1)}catch{y=!1}return y||(p=await this._fetchFeaturesForStats({field:r,field2:s,field3:n,valueExpression:l,normalizationField:o,returnGeometry:c,filter:a,view:i,signal:m},"json"),h=(await v.getFieldsList({valueExpression:l})).map((e=>this.getField(e)?.toJSON())).filter(Boolean)),{layerView:f,query:d,featuresJSON:p,fieldInfos:h}},m._uvFromClientQuery=async function(e,t){const{view:a,signal:i}=e,r=q.getUVQuery(this,e),s=await this._fetchFeatureSetFromMemory(r,a,i),n=await q.getUniqueValuesFromFeatureSet(s,{layer:this,field:e.field,field2:e.field2,field3:e.field3,fieldDelimiter:v.FIELD_DELIMITER,view:e.view,signal:e.signal});return _.createUVResult(n,t,e.returnAllCodedValues,v.FIELD_DELIMITER)},m._uvFromMemory=async function(e,t){const{view:a,field:i,valueExpression:r,returnAllCodedValues:s,signal:n}=e,{featuresJSON:o,graphics:l,layerView:u,query:m,fieldInfos:c}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryUniqueValues"}),f={field:i,field2:e.field2,field3:e.field3,fieldDelimiter:v.FIELD_DELIMITER,valueExpression:r,domains:t,returnAllCodedValues:s};return r&&a&&(o||l)&&(f.viewInfoParams=q.getViewInfoParams(a),f.fieldInfos=c),!o&&!l&&u&&"queryUniqueValues"in u?u.queryUniqueValues(m,f,{signal:n}):o?this.workerClient.uniqueValues(f,o):g.uniqueValues({attribute:f,features:l})},m._histogramForField=function(e){let t=null;return t=null!=e.minValue&&null!=e.maxValue?Promise.resolve({min:e.minValue,max:e.maxValue}):this.summaryStatistics(e).then((e=>{if(!e.count)throw new r(`${this.adapterName}:insufficient-data`,"Either the layer has no features or none of the features have data for the field");return{min:e.min,max:e.max}})),t.then((t=>q.getBins(this,{min:t.min,max:t.max},e.field,e.numBins??void 0,e.view,e.filter,e.signal)))},m._histogramFromMemory=async function(e){const{view:t,field:a,valueExpression:i,signal:r}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryHistogram"}),m={field:a,valueExpression:i,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numBins:e.numBins};return i&&t&&(s||n)&&(m.viewInfoParams=q.getViewInfoParams(t),m.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(m.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:s,graphics:n,layerView:o,query:l},r)),!s&&!n&&o&&"queryHistogram"in o?o.queryHistogram(l,m,{signal:r}):s?this.workerClient.histogram(m,s):g.histogram({attribute:m,features:n})},m._classBreaksFromInterpolation=function(e){const{minValue:t,maxValue:a}=e,i=e.numClasses||z,r=[],s=(a-t)/i;for(let l=0;l<i;l++){const e=t+l*s;r.push({minValue:e,maxValue:e+s})}r[i-1].maxValue=a;const n={classBreaks:r,normalizationTotal:e.normalizationTotal},o=_.resolveCBResult(n,e.classificationMethod);return Promise.resolve(o)},m._classBreaksFromMemory=async function(e){const{view:t,field:a,valueExpression:i,signal:r}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryClassBreaks"}),m={field:a,valueExpression:i,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numClasses:e.numClasses};return i&&t&&(s||n)&&(m.viewInfoParams=q.getViewInfoParams(t),m.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(m.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:s,graphics:n,layerView:o,query:l},r)),!s&&!n&&o&&"queryClassBreaks"in o?o.queryClassBreaks(l,m,{signal:r}):s?this.workerClient.classBreaks(m,s):g.classBreaks({attribute:m,features:n})},m._heatmapStatsFromMemory=async function(e,t){const{view:a,field:i,radius:r}=e,{featuresJSON:s,graphics:o}=await this._processStatsFromMemoryParams({...e,returnGeometry:!0});n.assertIsSome(a,"InMemoryLayerAdapter: must have a view");const l=new h({extent:a.extent,tolerance:"2d"===a.type?a.state.resolution:a.pixelSizeAt?.(a.center)}),u={field:i,fieldOffset:t,radius:r,transform:y.toQuantizationTransform(l),spatialReference:a.spatialReference?.toJSON(),size:a.size};return s?.length||o?.length?s?this.workerClient.heatmapStatistics(u,s):g.heatmapStatistics({attribute:u,features:o}):{count:0,min:null,max:null,avg:null,stddev:null}},m.getField=function(e=""){return this.layer.getField(e)},m.getFieldUsageInfo=function(e){return this.getField(e)?{supportsLabelingInfo:!0,supportsRenderer:!0,supportsPopupTemplate:!0,supportsLayerQuery:!0,supportsStatistics:!0}:null},m.getFieldDomain=function(e,t){return this.layer.getFieldDomain(e,t)},m.createQuery=function(){return this.layer.createQuery()},m.summaryStatistics=async function(e){const{field:t,valueExpression:a,sqlExpression:i,features:s,view:n}=e,o=t?this.getField(t):null,l=p.isDateField(o),u=!!a,m="3d"===n?.type;if(!a&&i&&!this.supportsSQLExpression)throw new r(`${this.adapterName}:not-supported`,"Layer does not support standardized SQL expression for queries");return u||s||m?this._summaryStatsFromMemory(e,o):this._summaryStatsFromClientQuery(e,l)},m.uniqueValues=async function(e){const{valueExpression:t,sqlExpression:a,features:i,view:s}=e,n=await q.getDomainsForFields(e,this),o=!!t,l="3d"===s?.type;if(!t&&a&&!this.supportsSQLExpression)throw new r(`${this.adapterName}:not-supported`,"Layer does not support standardized SQL expression for queries");return o||i||l?this._uvFromMemory(e,n):this._uvFromClientQuery(e,n)},m.histogram=async function(e){const{features:t,valueExpression:a,normalizationType:i,sqlExpression:s}=e,n=t||!!a;if(!a&&s&&!this.supportsSQLExpression)throw new r(`${this.adapterName}:not-supported`,"Layer does not support standardized SQL expression for queries");return n||i?this._histogramFromMemory(e):this._histogramForField(e)},m.classBreaks=async function(e){return!1!==e.analyzeData?this._classBreaksFromMemory(e):this._classBreaksFromInterpolation(e)},m.queryFeatureCount=async function(e){const{whereClause:t,view:a,signal:i}=e;if(!a)throw new r(`${this.adapterName}:insufficient-data`,"view is required to fetch the features from layerView");const s=this.layer.createQuery();s.where=F.mergeWhereClauses(s.where,t);const n=await a.whenLayerView(this.layer);return await l.whenOnce((()=>!n.updating),i),n.queryFeatureCount(s,{signal:i})},m.generateRenderer=async function(e,t){throw new r(`${this.adapterName}:not-supported`,"Layer does not support generateRenderer operation")},m.predominantCategories=async function(e){const{fields:t,view:a,signal:i}=e,r=w.getArcadeForPredominantCategory(t),s=await this._uvFromMemory({valueExpression:r,view:a,signal:i});return q.getPredominantCategoriesFromUVInfos(s.uniqueValueInfos,t)},m.heatmapStatistics=async function(e){const{field:t,fieldOffset:a,view:i,signal:r}=e;return(t&&null==a?this.summaryStatistics({field:t,view:i,signal:r}):Promise.resolve(null)).then((t=>{let i=a||0;if(t){const{count:e,min:a,max:r}=t;e?a===r&&0===a?i=1:r<=0?i="abs":a<0&&(i=-1.01*a):i=1}return this._heatmapStatsFromMemory(e,i).then((e=>({...e,summaryStatistics:t,fieldOffset:i})))}))},m.getSampleFeatures=async function(e,t){const{view:a,sampleSize:s,requiredFields:n,returnGeometry:o,filter:l,signal:u}=e,m=this.layer.createQuery(),c=1;if(m.outSpatialReference=e.spatialReference||a&&a.spatialReference,m.returnGeometry=!!o,m.outFields=n,q.updateQueryWithFeatureFilter(m,l),!a)throw new r(`${this.adapterName}:not-supported`,"view is required to get sample features for Layer");const f=await a.whenLayerView(this.layer);if(q.getMissingFields(this,n,f).length)throw new r(`${this.adapterName}:not-supported`,"Required fields need to be passed in the outFields for Layer");const y=await this._fetchFeaturesFromMemory(f,m,u,t),d=null!=s&&s>0&&s<=y.length?s:y.length;return i.pickRandom(y,d,c)},m.load=function(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=t.get("capabilities.query.supportsSqlExpression"),this.minScale=t.minScale,this.maxScale=t.maxScale,this.fullExtent=t.fullExtent,this._hasLocalSource=!1,this.hasQueryEngine=!0,this.workerClient=S.WorkerClient.getInstance(),await this.workerClient.open(e.signal)}));return this.addResolvingPromise(t),Promise.resolve(this)},t._createClass(u)}(V);a.__decorate([u.property({constructOnly:!0})],L.prototype,"layer",void 0),L=a.__decorate([f.subclass("esri.smartMapping.support.adapters.InMemoryLayerAdapter")],L);return L}));
