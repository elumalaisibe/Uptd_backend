/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
define(["../../../chunks/_rollupPluginBabelHelpers","../../../chunks/tslib.es6","../../../core/Error","../../../core/Logger","../../../core/accessorSupport/ensureType","../../../core/arrayUtils","../../../core/has","../../../core/accessorSupport/decorators/subclass","../../../rest/support/generateRendererUtils","../../statistics/support/utils","../../statistics/support/WorkerClient","../utils","./FeatureLayerAdapter","./support/utils"],(function(e,t,r,a,i,s,n,l,o,u,c,p,d,h){"use strict";let f=function(t){function a(){var e;return(e=t.apply(this,arguments)||this).adapterName="csv-layer-adapter",e}e._inherits(a,t);var i=a.prototype;return i._createGenerateRendererResult=async function(e,t,a,i,s){const n=e?.features,l=n?.length;if(!l)throw new r("csv-layer-adapter:insufficient-data","No features are available to calculate statistics");const c=h.ensureFeaturesJSON(n);let p=null;if("percent-of-total"===i){if(p=(await this.workerClient.summaryStatistics({field:t},c)).sum,null==p)throw new r("csv-layer-adapter:invalid","invalid normalizationTotal")}if("class-breaks-definition"===s?.type){const e=(await u.getDataValues({field:t,normalizationType:i,normalizationField:a,normalizationTotal:p},c)).filter((e=>Number.isFinite(e)));return o.createGenerateRendererClassBreaks({definition:s,values:e,normalizationTotal:p})}const d=(await u.getDataValues({field:t},c)).filter((e=>null!=e&&"string"==typeof e&&""!==e.trim()));return o.createGenerateRendererUniqueValues(d)},i.generateRenderer=function(e,t){const r=e.classificationDefinition;let a=null,i=null,s=null;"class-breaks-definition"===r?.type?(a=r.classificationField,i=r.normalizationField,s=r.normalizationType):a=r?.attributeField;const n=this.layer;return p.getFieldsList({field:a,normalizationField:i}).then((l=>{const o=n.createQuery();return o.returnGeometry=!1,o.outFields=l,o.where=u.mergeWhereClauses(o.where,e.where),n.queryFeatures(o,{signal:t}).then((e=>this._createGenerateRendererResult(e,a,i,s,r)))}))},i.load=function(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=!0,this._hasLocalSource=!1,this.hasQueryEngine=!0,this.workerClient=c.WorkerClient.getInstance(),await this.workerClient.open(e.signal)}));return this.addResolvingPromise(t),Promise.resolve(this)},e._createClass(a)}(d);f=t.__decorate([l.subclass("esri.smartMapping.support.adapters.CSVLayerAdapter")],f);return f}));
