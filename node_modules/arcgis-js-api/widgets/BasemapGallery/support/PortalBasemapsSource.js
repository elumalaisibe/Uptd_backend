/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
define(["../../../chunks/_rollupPluginBabelHelpers","../../../chunks/tslib.es6","../../../Basemap","../../../core/Collection","../../../core/Error","../../../core/Handles","../../../core/Loadable","../../../core/Logger","../../../core/Promise","../../../core/promiseUtils","../../../core/reactiveUtils","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/ensureType","../../../core/arrayUtils","../../../core/has","../../../core/accessorSupport/decorators/subclass","../../../portal/Portal","./LocalBasemapsSource"],(function(t,e,a,r,o,s,l,i,n,p,c,u,h,d,y,m,_,f){"use strict";const b=r.ofType(a);let B=function(e){function a(t){var a;return(a=e.call(this,t)||this)._handles=new s,a._lastPortalBasemapFetchController=null,a.basemaps=new b,a.filterFunction=null,a.portal=_.getDefault(),a.query=null,a.updateBasemapsCallback=null,a.viewType=null,a}t._inherits(a,e);var r=a.prototype;return r.initialize=function(){this._handles.add([c.watch((()=>[this.filterFunction,this.loadStatus,this.portal?.basemapGalleryGroupQuery,this.portal?.basemapGalleryGroupQuery3D,this.portal?.user,this.query,this.updateBasemapsCallback]),(()=>this.refresh()),c.initial)])},r.destroy=function(){this._handles.destroy(),this._handles=null,this.filterFunction=null,this.portal=null},r.load=function(t){return this.addResolvingPromise(this.portal.load(t)),Promise.resolve(this)},r.refresh=async function(){if("loaded"!==this.loadStatus)return;this._lastPortalBasemapFetchController&&(this._lastPortalBasemapFetchController.abort(),this._lastPortalBasemapFetchController=null);const t=this.portal,e=new AbortController;this._lastPortalBasemapFetchController=e,this.notifyChange("state");try{const a=await t.fetchBasemaps(this._toQueryString(this.query),{signal:e.signal,include3d:"3d"===this.viewType||void 0});await this._updateBasemaps(a)}catch(a){if(p.isAbortError(a))throw a;i.getLogger(this).warn(new o("basemap-source:fetch-basemaps-error","Could not fetch basemaps from portal.",{error:a})),await this._updateBasemaps()}this._lastPortalBasemapFetchController=null,this.notifyChange("state")},r._toQueryString=function(t){return t&&"string"!=typeof t?Object.keys(t).map((e=>`${e}:${t[e]}`)).join(" AND "):t},r._updateBasemaps=async function(t=[]){let e=await this._filterBasemaps(t);e=this.updateBasemapsCallback?this.updateBasemapsCallback(e):e,this.basemaps.removeAll(),this.basemaps.addMany(e)},r._filterBasemaps=async function(t){if(!this.filterFunction)return t;const e=t.map(this.filterFunction),a=await Promise.all(e);return t.filter(((t,e)=>a[e]))},t._createClass(a,[{key:"state",get:function(){return"not-loaded"===this.loadStatus?"not-loaded":"loading"===this.loadStatus||this._lastPortalBasemapFetchController?"loading":"ready"}}]),a}(l.LoadableMixin(n.EsriPromiseMixin(f)));e.__decorate([u.property({readOnly:!0,type:b})],B.prototype,"basemaps",void 0),e.__decorate([u.property()],B.prototype,"filterFunction",void 0),e.__decorate([u.property({type:_})],B.prototype,"portal",void 0),e.__decorate([u.property()],B.prototype,"query",void 0),e.__decorate([u.property({readOnly:!0})],B.prototype,"state",null),e.__decorate([u.property()],B.prototype,"updateBasemapsCallback",void 0),e.__decorate([u.property()],B.prototype,"viewType",void 0),B=e.__decorate([m.subclass("esri.widgets.BasemapGallery.support.PortalBasemapsSource")],B);return B}));
